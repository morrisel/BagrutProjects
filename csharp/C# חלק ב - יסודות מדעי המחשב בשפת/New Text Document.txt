*******************************************************************************************************
// פרק 1 - מערך חד-ממדי
*******************************************************************************************************

*******************************************************************************************************
//page12ex01

using System;

class Program
{
    /*קלט: קליטת ערך לתא הראשון אל תוך המערך*/
    static void Main()
    {
        int[] numbers = new int[5];

        Console.WriteLine("Enter a number");
        numbers[0] = int.Parse(Console.ReadLine());

        for (int i = 1; i < numbers.Length; i++)
        {
            numbers[i] = numbers[i - 1] + i;
            Console.WriteLine(numbers[i]);
        }

        Console.ReadKey();
    }
}


*******************************************************************************************************
// p12ex02

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[6];
        numbers[0] = 1;
        numbers[1] = 2;
        numbers[2] = 3;
        numbers[3] = 4;
        numbers[4] = 5;
        numbers[5] = 6;

        for (int i = 1; i <= numbers.Length; i++)
        {
            if (i % 2 == 0)
                numbers[i - 1] = i + 2;
            else
                numbers[i - 1] = i * 2;
        }

        Console.WriteLine();
        for (int i = 0; i < 6; i++)
        {
            Console.WriteLine("numbers[{0}] = {1}", i, numbers[i]);
        }

        Console.ReadKey();
    }
}


*******************************************************************************************************
// p13ex03

using System;

class Program
{
    /* קלט: נתוני 20 קפיצות */
    /* פלט: מספר התלמידים הכולל ומספרם הסידורי של התלמידים שקפצו מעל הממוצע */
    static void Main()
    {
        double[] heights = new double[20];
        double sum = 0.0, avg;
        int aboveAvg = 0;

        Console.WriteLine("Enter number of jumps");
        for (int i = 0; i < heights.Length; i++)
        {
            heights[i] = double.Parse(Console.ReadLine());

            // סכום הקפיצות
            sum = sum + heights[i];
        }

        // ממוצע הקפיצות
        avg = sum / (heights.Length);
        Console.WriteLine("The average of jumps is: {0}", avg);

        for (int i = 0; i < heights.Length; i++)
        {
            if (heights[i] > avg)
            {
                aboveAvg++;
                Console.WriteLine("Student number {0} passed the average", i + 1);
            }
        }

        Console.WriteLine("{0} student above average", aboveAvg);

        Console.ReadKey();
    }
}


*******************************************************************************************************
// p15ex04

using System;

class Program
{
    const int TOP = 6;

    static void Main()
    {
        //int[] a = new int[TOP] { 5, 9, 8, 7, 3, 1 };

        int[] a = new int[TOP];
        int temp;

        Console.WriteLine("Enter {0} integer numbers", TOP);
        for (int i = 0; i <= TOP - 1; i++)
            a[i] = int.Parse(Console.ReadLine());

        temp = a[TOP - 1];

        for (int i = TOP - 1; i >= 1; i--)
            a[i] = a[i - 1];

        a[0] = temp;

        Console.WriteLine();
        for (int i = 0; i <= TOP-1; i++)
            Console.WriteLine("{0} ", a[i]);

        Console.ReadKey();
    }
}


*******************************************************************************************************
// p16tar01

using System;

class Program
{
    static void Main()
    {
        int[] m = { 0, 0, 0, 0 };
        int m1, m2;

        Console.WriteLine("Enter four numbers");
        m[0] = int.Parse(Console.ReadLine());
        m[1] = int.Parse(Console.ReadLine());
        m1 = int.Parse(Console.ReadLine());
        m2 = int.Parse(Console.ReadLine());

        m[1] = 10 * m[1];
        m[2] = m1 + m2;
        m[3] = m[1] + m[2] + m[3];

        //-------------------------- output
        //Console.Write("\nm:");
        //for (int i = 0; i < m.Length; i++)
        //    Console.Write(" {0}", m[i]);

        //Console.WriteLine();
        //Console.WriteLine("m1 = {0}, m2 = {1}", m1, m2);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar03

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[6];

        // איפוס אברי המערך
        // קליטת נתונים למערך
        // (הדפסת כל איברי המערך בהתאם לסדר קליטתם (בהנחה שהקליטה לפי סדר המציינים
        // (הדפסת כל איברי המערך בסדר ההפוך לקליטתם (בהנחה שהקליטה לפי סדר המציינים
        // הדפסת כל האיברים הנמצאים במקומות הזוגיים
        // הדפסת כל האיברים הנמצאים במקומות האי-זוגיים
        // הדפסת המציינים של איברי המערך שערכם אי-זוגי

        // איפוס אברי המערך
        Console.WriteLine("The numbers in array is:");
        for (int i = 0; i < 6; i++)
            numbers[i] = 0;

        for (int i = 0; i < 6; i++)
        {
            Console.Write(" {0,3}", numbers[i]);
        }

        // קליטת נתונים למערך
        Console.WriteLine("\n\nEnter six numbers for filling the array");
        for (int i = 0; i < 6; i++)
            numbers[i] = int.Parse(Console.ReadLine());

        // (הדפסת כל איברי המערך בהתאם לסדר קליטתם (בהנחה שהקליטה לפי סדר המציינים
        Console.WriteLine("\nPrinting array:");
        for (int i = 0; i < 6; i++)
            Console.Write(" {0,3}", numbers[i]);

        // (הדפסת כל איברי המערך בסדר ההפוך לקליטתם (בהנחה שהקליטה לפי סדר המציינים
        Console.WriteLine("\n\nPrinting reverse array:");
        for (int i = 5; i >= 0; i--)
            Console.Write(" {0,3}", numbers[i]);

        // הדפסת כל האיברים הנמצאים במקומות הזוגיים
        Console.WriteLine("\n\nPrinting array numbers of even position:");
        for (int i = 0; i < 6; i += 2)
            Console.Write(" {0,3}", numbers[i]);

        // הדפסת כל האיברים הנמצאים במקומות האי-זוגיים
        Console.WriteLine("\n\nPrinting array numbers of odd position:");
        for (int i = 1; i < 6; i += 2)
            Console.Write(" {0,3}", numbers[i]);

        // הדפסת המציינים של איברי המערך שערכם אי-זוגי
        Console.WriteLine("\n\nPrinting indexers of array:");
        for (int i = 1; i < 6; i += 2)
            Console.Write(" {0,3}", i);


        /********************* FIRST WAY **********************/
        /*
        // איפוס אברי המערך
        numbers[0] = 0;
        numbers[1] = 0;
        numbers[2] = 0;
        numbers[3] = 0;
        numbers[4] = 0;
        numbers[5] = 0;

        // קליטת נתונים למערך
        numbers[0] = int.Parse(Console.ReadLine());
        numbers[1] = int.Parse(Console.ReadLine());
        numbers[2] = int.Parse(Console.ReadLine());
        numbers[3] = int.Parse(Console.ReadLine());
        numbers[4] = int.Parse(Console.ReadLine());
        numbers[5] = int.Parse(Console.ReadLine());

        // (הדפסת כל איברי המערך לסדר קליטתם (בהנחה שהקליטה לפי סדר המציינים
        Console.Write("\n{0}  {1}  {2}  {3}  {4}  {5}", numbers[0], numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]);

        // (הדפסת כל איברי המערך בסדר ההפוך לקליטתם (בהנחה שהקליטה לפי סדר המציינים
        Console.Write("\n{0}  {1}  {2}  {3}  {4}  {5}", numbers[5], numbers[4], numbers[3], numbers[2], numbers[1], numbers[0]);

        // הדפסת כל האיברים הנמצאים במקומות הזוגיים
        Console.Write("\n{0}  {1}  {2}", numbers[0], numbers[2], numbers[4]);

        // הדפסת כל האיברים הנמצאים במקומות האי-זוגיים
        Console.Write("\n{0}  {1}  {2}  {3}  {4}  {5}", numbers[1], numbers[3], numbers[5]);

        // הדפסת המציינים של איברי המערך שערכם אי-זוגי
        int i = 1;
        while (i < 6 && i % 2 != 0)
        {
            Console.Write("The indexers of arrays is {0} ", i);
            i += 2;
        }
        */

        Console.WriteLine();
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar04a

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[5];

        for (int i = 0; i < 5; i++)
            numbers[i] = i + 1;

        for (int i = 0; i < 5; i++)
            Console.Write("{0} ", numbers[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar04b

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[5];

        for (int i = 0; i < 5; i++)
            numbers[i] = i;

        for (int i = 0; i < 5; i++)
            Console.Write(" {0}", numbers[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar04c

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[5];

        for (int i = 4; i >= 0; i--)
            numbers[i] = i + 1;

        for (int i = 4; i >= 0; i--)
            Console.Write(" {0}", numbers[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar04d

using System;

class Program
{
    static void Main()
    {
        int[] numbers = new int[5];

        for (int i = 0; i < 5; i++)
            numbers[i] = i;

        for (int i = 4; i >= 0; i--)
            Console.Write(" {0}", numbers[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar05

using System;

class Program
{
    static void Main()
    {
        int[] num = new int[5];
        int x = 2;

        for (int i = 0; i < num.Length; i++)
            num[i] = x * (i + 1);

        for (int i = 0; i < num.Length; i++)
            Console.Write(" {0}", num[i]);

        //------------------------------- second way
        //for (int i = 0; i < num.Length; i++)
        //{
        //    num[i] = x * (i + 1);
        //    Console.Write("{0} ", num[i]);
        //}
        
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar06a

using System;

class Program
{
    static void Main()
    {
        int i, b;
        int[] num = new int[6];

        i = 1;
        num[i] = 2;
        num[i + 1] = 4;
        b = num[++i] + 10;

        Console.WriteLine("i = {0} , b = {1}", i, b);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p17tar06b

using System;

class Program
{
    static void Main()
    {
        int i, b;
        int[] num = new int[6];

        i = 1;
        num[i] = 2;
        num[i + 1] = 4;
        b = num[i++] + 10;

        Console.WriteLine("i = {0} , b = {1}", i, b);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar07

using System;

class Program
{
    static void Main()
    {
        int test;
        int[] a, b;

        a = new int[6];
        b = new int[4];

        Random rnd = new Random();

        test = rnd.Next(0);
        Console.WriteLine(test);
        Console.WriteLine("\n");

        for (int i = 0; i < 6; i++)
        {
            a[i] = rnd.Next(6) + 1 - i;
            Console.Write("{0} ", a[i]);
        }

        Console.WriteLine("\n");

        for (int i = 0; i < 4; i++)
        {
            //if (((1 - i) * 3 +3) < 0)
            //break;
            b[i] = rnd.Next(Math.Abs(1 - i) * 3) + 3;
            Console.Write("{0} ", b[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar07a

using System;

class Program
{
    static void Main()
    {
        Random randNum = new Random();
        int i = 0;
        int[] a = { 6, 5, 3, 3, 2, 1 };
        //int[] a = { 5, 4, 3, 1, -2, 5 };
        //int[] a = { 4, 2, 8, 5, 6, 5 };

        int[] tempArr = new int[6];

        Console.Write("\na: #");
        // סורקת את איברי המערך הנוכחי while לולאת
        while (i < 6)
        {
            int num = randNum.Next(6);

            if (a[i] == (num + 1 - i))
            {
                tempArr[i] = a[i];
                Console.Write(" {0}", tempArr[i]);
                i++;
                
            }
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar07b

using System;

class Program
{
    static void Main()
    {
        Random randNum = new Random();
        int i = 0;
        //int[] a = { 6, -3, 0, -3 };
        int[] a = { 6, 3, 0, -3 };
        //int[] a = { 1, 3, 4, -3 };
        //int[] a = new int[4];

        int[] tempArr = new int[4];

        Console.Write("\na: ");
        // סורקת את איברי המערך הנוכחי while לולאת
        while (i < 4)
        {
            int num = randNum.Next((1 - i) * 3);
            num = num + 3;

            if (a[i] == num)
            {
                tempArr[i] = a[i];
                Console.Write(" {0}", tempArr[i]);
                i++;
            }
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar08

using System;

class Program
{
    static void Main()
    {
        int[] a = new int[10];

        for (int i = 0; i < a.Length; i++)
        {
            a[i] = 10 * i + 10;
            Console.Write(" {0,4}", a[i]);
        }

        Console.WriteLine("\n" + new string('-', 50));
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = (int)Math.Pow((i + 1), 2);
            Console.Write(" {0,4}", a[i]);
        }

        Console.WriteLine("\n" + new string('-', 50));
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = i + 1;
            if (a[i] % 2 == 0) a[i] = 0;

            //// ternary operator
            //a[i] = (a[i] % 2 == 0) ? 0 : a[i];

            Console.Write(" {0,4}", a[i]);
        }

        Console.WriteLine("\n" + new string('-', 50));
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = 3 * (i + 1);
            Console.Write(" {0,4}", a[i]);
        }

        Console.WriteLine("\n" + new string('-', 50));
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = 2 * i + 2;

            if (i % 2 != 0)
                a[i] = (-1) * a[i];

            Console.Write(" {0,4}", a[i]);
        }

        Console.WriteLine("\n" + new string('-', 50));
        for (int i = 0, sum = 0; i < a.Length; i++)
        {
            sum = sum + i;

            a[i] = 7 + sum;
            
            Console.Write(" {0,4}", a[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar09

using System;

class Program
{
    static void Main()
    {
        int max, min, count = 0;
        int[] arr = { 4, 9, 2, 8, 5, 6, -2, 3, 9 };
        int[] indexArr = new int[arr.Length];

        Console.Write("arr: ");
        for (int i = 0; i < arr.Length; i++)
            Console.Write("{0,3}", arr[i]);

        max = arr[0];
        min = arr[0];
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] < min)
            {
                min = arr[i];
            }

            if (arr[i] >= max)
            {
                max = arr[i];
                count++;
                indexArr[i] = i;
            }
        }

        Console.WriteLine("\n");
        // הדפסת המספר המינימלי והמספר המקסימלי
        Console.WriteLine("The mininmum value of array is:\t\t{0}", min);
        Console.WriteLine("The maximum value of array is:\t\t{0}", max);

        // הדפסת מספר ההופעות של המספר המקסימלי במערך
        Console.WriteLine("The max numbers value of array is:\t{0}", count - 1);

        // הדפסת המציינים של המספר המקסימלי במערך
        Console.Write("The index of max value they are:\t");
        for (int i = 0; i < indexArr.Length; i++)
            if (indexArr[i] != 0)
                Console.Write("{0} ",i);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar10

using System;

class Program
{
    static void Main()
    {
        double avg;
        int[] arr = { 1, 9, 2, 8, 5, 4, 7, 5, 9 };
        int count = 0, sum = 0;

        //---------------------------------- הדפסת ממוצע הערכים במערך
        for (int i = 0; i < arr.Length; i++)
        {
            sum = sum + arr[i];
            count++;
        }

        avg = (double)sum / count;
        Console.WriteLine("The average of array is: {0}", avg);

        //---------------------------------- הדפסת מספר הערכים במערך שערכם שונה מהממוצע
        count = 0;
        avg = (int)avg;
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] != avg)
                count++;
        }

        Console.Write("The different numbers in array value = {0}", count);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar11

using System;

/* פלט: האם סכום הערכים הנמצאים במקומות הזוגיים במערך */
/* שווה לסכום הערכים במקומות הזוגיים */
class Program
{
    static void Main()
    {
        // סכום המספרים במקומות האי-זוגיים
        int oddSum = 0;

        // סכום המספרים במקומות הזוגיים
        int evenSum = 0;

        int[] a = { 4, 7, 2, 8, 9, 6, 5, 1, 9, 3 };
        //int[] a = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };

        for (int i = 0; i < a.Length; i++)
        {
            if (i % 2 == 0)
                evenSum = evenSum + a[i];
            else
                oddSum = oddSum + a[i];
        }

        if (evenSum == oddSum)
            Console.WriteLine("The sums is equals");
        else
            Console.WriteLine("The sums isn't equals");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar12

using System;

class Program
{
    static void Main()
    {
        int[] a = { 4, 7, 2, 8, 9, 6 };

        for (int i = 0; i < 6; i++)
            a[i] = i;

        for (int i = 0; i < 6; i++)
            a[i] = i++;

        for (int i = 0; i < 6; i++)
            a[i] = a[i] + 1;
        /*
        for (int i = 0; i < 6; i++)         // Exception
            a[i] = a[i + 1];
        */
        /*
        for (int i = 0; i < 6; i++)         // Exception
            a[i - 1] = a[i];
        */

        for (int i = 0; i < 3; i++)
            a[i] = a[i * 2];

        /*
        int j = 1;
        while (j <= 6)                      // Exception
        {
            a[j + 1] = j + 1;
            j++;
        }
        */

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p18tar13

using System;

/* נמצא במערך num האלגוריתם הבא בודק האם הערך במשתנה */
class CodeFile1
{
    static void Main()
    {
        bool found = false;
        int num;
        int[] a = { 4, 9, 2, 8, 6, 5 };

        Console.Write("Enter a number: ");
        num = int.Parse(Console.ReadLine());

        for (int i = 0; i < a.Length; i++)
        {
            if (a[i] == num)
            {
                found = true;
                break;
            }
            else
                found = false;
        }
        Console.Write("\nThe number that putted is: {0} - it's {1}", num, found);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p19tar14

using System;

/* קלט: קליטת מספרים שלמים בגודל המערך הנתוך */
/* פלט: הודע, האם כל המספרים שהוזנו שווים זה לזה שבמערך */
class Program
{
    static void Main()
    {
        bool found = false;
        int num = 0, count = 0;
        int[] a = { 4, 9, 2, 8, 6, 5 };
        //int[] b = { 4, 9, 2, 8, 6, 5 };
        //int[] a = { 3, 3, 3, 3, 3, 3 };

        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("enter a number: ");
            num = int.Parse(Console.ReadLine());

            if (a[i] == num)
                found = true;
            else
            {
                found = false;
                count++;
            }
        }

        if (count > 0)
        {
            found = false;
            Console.Write("\n found is: {0}", found);
        }
        else
            Console.Write("\n found is: {0}", found);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p19tar15

using System;

class Program
{
    static void Main()
    {
        int count = 0;

        //int[] a = { 4, 7, 2, 8, 9, 1, 6 };

        // מערך ממוין בסדר עולה
        int[] a = { 3, 5, 7, 11, 13, 17, 19 };

        for (int i = 0; i < a.Length - 1; i++)
            if (a[i] > a[i + 1])
                count++;

        if (count != 0)
            Console.WriteLine("The array a[] isn't ordered");
        else
            Console.WriteLine("The array a[] is ordered");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p20tar16

using System;

/* שלב 1: נמיין את המערך */
/* שלב 2: נצור מעך חדש שבו יכנסו הערכים החסרים מהמערך הממוין */

class Program
{
    static void Main()
    {
        char chTemp;
        int index = 0, count = 0;

        char[] chLower = new char[26];
        char[] chUpper = new char[26];

        char[] allLetters;
        char[] let = { 'a', 't', 'B', 'e', 'X', 'm' };

        Console.WriteLine("printing array 'let' before sorting #");
        for (int i = 0; i < let.Length; i++)
            Console.Write("{0,2}", let[i]);

        // ------------------------------------------- שלב 1
        // ABC-תחילה נמיין את המערך לפי ה
        for (int i = 0; i < let.Length - 1; i++)
        {
            for (int j = 1; j < let.Length; j++)
            {
                if (let[j - 1] > let[j])
                {
                    chTemp = let[j];
                    let[j] = let[j - 1];
                    let[j - 1] = chTemp;
                }
            }
        }

        // let[] = B, X, a, e, m, t
        Console.WriteLine("\n\nprinting array 'let' after sorting #");
        for (int i = 0; i < let.Length; i++)
            Console.Write("{0,2}", let[i]);

        // ------------------------------------------- שלב 2
        // 65-90: A-Z
        // 97-123: a-z
        allLetters = new char[(26 + 26) - let.Length];
        for (char ch = 'A'; ch < 'z'; ch++)
        {
            if ((ch != let[index] && (int)ch <= 90) ||
                (ch != let[index] && (int)ch >= 97))
            {
                allLetters[count] = ch;
                count++;
            }

            if (ch == let[index])
            {
                if (index == 5)
                    index = 4;

                index++;
            }
        }

        Console.WriteLine("\n\nprinting a new array 'allLetters' after sorting, and" + 
            "\nall the letters that doesn't included in 'let' array #");
        for (int i = 0; i < allLetters.Length; i++)
            Console.Write("{0,2}", allLetters[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p20tar17

using System;

class Program
{
    static void Main()
    {
        int[] a = { 4, 2, 8, 5, 6, 5 };
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,3} ", a[i]);

        Console.WriteLine();

        int[] b = new int[a.Length];
        for (int i = 0; i < b.Length; i++)
        {
            b[i] = a[i] * 2;
            Console.Write("{0,3} ", b[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p20tar18

using System;

class Program
{
    static void Main()
    {
        int sum = 0;
        int[] a = { 9, 5, 1, 5 };
        int[] b = new int[a.Length / 2 * 3];

        Console.WriteLine();
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,3} ", a[i]);

        Console.WriteLine("\n");
        for (int i = 0; i < a.Length - 1; i += 2)
        {
            sum = a[i] + a[i + 1];
            if (sum % 3 == 0)
            {
                for (int j = 0; j < 3; j += 3)
                {
                    b[j] = a[i];
                    b[j + 1] = a[i + 1];
                    b[j + 2] = sum;
                    Console.Write("{0,3} {1,3} {2,3}", b[j], b[j + 1], b[j + 2]);
                }
            }
            else
            {
                for (int j = 0; j < 3; j += 3)
                {
                    b[j] = a[i];
                    b[j + 1] = a[i + 1];
                    b[j + 2] = 0;
                    Console.Write("{0,3} {1,3} {2,3}", b[j], b[j + 1], b[j + 2]);
                }
            }
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p20tar19

using System;

class Program
{
    static void Main()
    {
        int[] action = { 2, 31, 11, 1, -40, 10 };
        int[] result = new int[action.Length / 3];

        int i = 0;
        while (i < result.Length)
        {
            for (int j = 0; j < action.Length; j += 3)
            {
                if (action[j] == 1)
                {
                    result[i] = action[j + 1] + action[j + 2];
                }
                else
                {
                    if (action[j] == 2)
                    {
                        result[i] = action[j + 1] - action[j + 2];
                    }
                }
                i++;
            }
        }

        for (i = 0; i < result.Length; i++)
        {
            Console.WriteLine(result[i]);
        }

        Console.ReadKey();
    }
}

// פיתרון נוסף - הכללה
/*
class Program
{
    static void Main(string[] args)
    {
        bool flag = false;
        int n = 0;
        int[] action, result;

        while (!flag)
        {
            Console.Write("Enter a number for length of array: ");
            n = int.Parse(Console.ReadLine());
            if (n % 3 == 0 && n >= 3)
                flag = true;
        }

        // action יצירת מערך
        action = new int[n];
        for (int i = 0; i < action.Length; i++)
            Console.Write("action[{0}] = {1}\n", i, action[i]);
        Console.WriteLine();

        // מקבל מספרים שלמים action המערך
        for (int i = 0; i < action.Length; i++)
        {
            if (i % 3 == 0)
            {
                Console.Write("Enter number 1 or 2: ");
                action[i] = int.Parse(Console.ReadLine());
            }
            else
            {
                Console.Write("Enter an any number: ");
                action[i] = int.Parse(Console.ReadLine());
            }
        }
        Console.WriteLine();

        // action הצגת מערך
        for (int i = 0; i < action.Length; i++)
            Console.Write("action[{0}] = {1}\n", i, action[i]);

        Console.WriteLine();

        // result יצירת מערך
        result = new int[n / 3];

        // result למערך action מתבצעת העתקת ערכים מחושבים ממערך
        for (int j = 0; j < result.Length; )
        {
            for (int i = 0; i < action.Length; i++)
            {
                if (i % 3 == 0)
                {
                    if (action[i] == 1)
                        result[j] = action[i + 1] + action[i + 2];

                    if (action[i] == 2)
                        result[j] = action[i + 1] - action[i + 2];
                    j++;
                }
            }
        }

        for (int j = 0; j < result.Length; j++)
            Console.Write("\nresult[{0}] = {1}", j, result[j]);
        Console.WriteLine();

        Console.ReadKey();
    }
}
*/

*******************************************************************************************************
// p20tar20

using System;

class Program
{
    const int TOP = 10;

    static void Main()
    {
        int[] a = { 15, 6, 12, 3, 9, 0, 24, 21, 18, 20 };
        int[] b = { 13, 7, 3, 5, 2, 17, 11, 19, 23, 29 };
        int[] c = new int[TOP];

        int temp;

        Console.WriteLine("Printing the original - arrays a[] and b[]");
        Console.Write("array a[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", a[i]);

        Console.Write("\n\narray b[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", b[i]);

        Console.WriteLine("\n\n" + new string('-', 50));

        ///////////////////////////////////////////////////////////////////////////
        //------------------------------------ a מיון על המערך
        for (int i = 0; i < TOP; i++)
        {
            for (int j = 0; j < TOP - 1; j++)
            {
                if (a[j] > a[j + 1])
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }

        //------------------------------------ b מיון על המערך
        for (int i = 0; i < TOP; i++)
        {
            for (int j = 0; j < TOP - 1; j++)
            {
                if (b[j] > b[j + 1])
                {
                    temp = b[j];
                    b[j] = b[j + 1];
                    b[j + 1] = temp;
                }
            }
        }

        Console.WriteLine("Printing the ordered - arrays a[] and b[]");
        Console.Write("array a[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", a[i]);

        Console.Write("\n\narray b[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", b[i]);

        Console.WriteLine("\n\n" + new string('-', 50));

        ///////////////////////////////////////////////////////////////////////////
        //-------------------------- a הפיכת סדר של מערך
        for (int i = 0; i < TOP / 2; i++)
        {
            temp = a[i];
            a[i] = a[TOP - i - 1];
            a[TOP - i - 1] = temp;
        }

        //-------------------------- b הפיכת סדר של מערך
        for (int i = 0; i < TOP / 2; i++)
        {
            temp = b[i];
            b[i] = b[TOP - i - 1];
            b[TOP - i - 1] = temp;
        }

        Console.WriteLine("Printing the reversed - arrays a[] and b[]");
        Console.Write("array a[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", a[i]);

        Console.Write("\n\narray b[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", b[i]);

        Console.WriteLine("\n\n" + new string('-', 50));

        ///////////////////////////////////////////////////////////////////////////
        //-------------------------- b-ו a מציאת ערכים הגדולים ביותר בין שני המערכים
        //-------------------------- c והשמתם לתוך מערך חדש
        for (int i = 0; i < TOP; i++)
        {
            if (a[i] > b[i])
            {
                c[i] = a[i];
            }
            else
            {
                if (a[i] == b[i])
                    c[i] = 0;
                c[i] = b[i];
            }
        }

        Console.WriteLine("Printing a new array c[] with biggest values from a[] and b[] arrays");
        Console.Write("array a[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", c[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p20tar21

using System;

class Program
{
    const int TOP = 10;

    static void Main()
    {
        int[] a = { 13, -7, 3, -5, 2, -17, 11, -19, 23, 29 };
        int[] b = new int[TOP];

        int temp = 0;

        Console.WriteLine("Printing the original array a[]");
        Console.Write("array a[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", a[i]);

        Console.WriteLine("\n" + new string('-', 50));

        for (int i = 0; i < TOP; i++)
        {
            for (int j = 0; j < TOP-1; j++)
            {
                if (a[j] > a[j + 1])
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
            b[i] = a[i];
        }

        Console.Write("\narray b[#] ");
        for (int i = 0; i < TOP; i++)
            Console.Write("{0,3}", b[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p21ex05

using System;

class Ch1Solve5Collect
{
    /* טענת כניסה: הפעולה מקבלת מערך תרומות ומספר כיתה */
    /* טענת יציאה: הפעולה מדפיסה את מספר התלמידים שהתרימו בכל קטגוריה */
    static void Donation(double[] a, int cl)
    {
        // הממוצה של התרומה
        double sum = 0.0;

        for (int i = 0; i < a.Length; i++)
            sum += a[i];

        sum = sum / a.Length;

        int suma = 0, sumb = 0;
        for (int i = 0; i < a.Length; i++)
        {
            if (a[i] <= sum)
                suma++;         // כמות התרומות עד לממוצע שהתקבלה
            else
                sumb++;         // כמות התרומות מעל הממוצע שהתקבלה4
        }

        Console.WriteLine("Class " + cl + " up to average: " + suma);
        Console.WriteLine("Class " + cl + " more than average: " + sumb);
    }


    static void Main()
    {
        //------------- 1 קלט של גודל הכיתה וסכומי התרומות של תלמידי הכיתה
        Console.WriteLine("Enter number of students in class 1");
        double[] class1 = new double[int.Parse(Console.ReadLine())];

        Console.WriteLine("Enter donation of each students");
        for (int i = 0; i < class1.Length; i++)
            class1[i] = double.Parse(Console.ReadLine());


        //------------- 2 קלט של גודל הכיתה וסכומי התרומות של תלמידי הכיתה
        Console.WriteLine("Enter number of students in class 2");
        double[] class2 = new double[int.Parse(Console.ReadLine())];

        Console.WriteLine("Enter donation of each students");
        for (int i = 0; i < class2.Length; i++)
            class2[i] = double.Parse(Console.ReadLine());

        //--------------------------- Donation זימון הפעולה
        Donation(class1, 1);
        Donation(class2, 2);



        Console.ReadKey();
    }
}

*******************************************************************************************************
// p22ex06

using System;

class Ch1solve6cellular
{
    const int N = 31;

    /* טענת כניסה: הפעולה מקבלת מערך */
    /* טענת יציאה: הפעולה מחזירה איברי המערך */
    static double Avg(int[] month)
    {
        double sum = 0.0;

        for (int i = 0; i < N; i++)
            sum += month[i];

        return sum / N;
    }


    static void Main()
    {
        int[] month1 = new int[N];
        int[] month2 = new int[N];
        double avg1, avg2;

        Console.WriteLine("Enter data for the first month");
        for (int i = 0; i < N; i++)
            month1[i] = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter data for the second month");
        for (int i = 0; i < N; i++)
            month2[i] = int.Parse(Console.ReadLine());

        avg1 = Avg(month1);
        avg2 = Avg(month2);

        if (avg2 * 1.25 <= avg1)
            Console.WriteLine("yes");
        else
            Console.WriteLine("no");



        Console.ReadKey();
    }
}

*******************************************************************************************************
// p23ex07

using System;

class Ch1Solve7Maam
{
    const int N = 3;
    const double CMAAM = 15.5, LMAAM = 17;

    /* טענת כניסה: הפעולה לא מקבלת פרמטרים */
    /* טענת יציאה: הפעולה מחזירה מערך מחירים לפני ההוזלה */
    /// <summary>
    /// ומחזירה אותו p קולטת איברים למערך ReadPrices הפעולה
    /// </summary>
    /// <returns></returns>
    static double[] ReadPrices()
    {
        double[] p = new double[N];

        for (int i = 0; i < N; i++)
            p[i] = double.Parse(Console.ReadLine());

        return p;
    }


    /* טענת כניסה: הפעולה מקבלת מערך מחירים */
    /* טענת יציאה: הפעולה מחזירה את המערך מעודכן לאחר הוזלת המע"מ */
    /// <summary>
    /// מעדכנת את המחירים לפי המע"מ החדש Update הפעולה
    /// </summary>
    /// <param name="p"></param>
    static void Update(double[] p)
    {
        for (int i = 0; i < N; i++)
            p[i] = p[i] / LMAAM * CMAAM;
    }


    static void Main()
    {
        double[] price;

        Console.WriteLine("Type prices");
        price = ReadPrices();

        Update(price);

        for (int i = 0; i < N; i++)
            Console.WriteLine(price[i]);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p25TestMemory

using System;

class Ch1TestMemory
{
    public static void NumToOne(int x)
    {
        x = 1;
    }

    public static void NumbersToOne(int[] arr)
    {
        for (int i = 0; i < arr.Length; i++)
            arr[i] = 1;
    }


    static void Main()
    {
        int num = 0;
        int[] numbers=new int[7];

        Console.WriteLine("Num before op = " + num);
        NumToOne(num);
        Console.WriteLine("Num after op = " + num);

        for (int i = 0; i < numbers.Length; i++)
            numbers[i] = 0;

        Console.WriteLine("\nArray before op: ");
        for (int i = 0; i < numbers.Length; i++)
            Console.Write(numbers[i] + " ");

        Console.WriteLine();
        NumbersToOne(numbers);
        Console.WriteLine("\nArray after op: ");
        for (int i = 0; i < numbers.Length; i++)
            Console.Write(numbers[i] + " ");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar22

using System;

class Program
{
    public static bool BalancedTestForArray(int[] arr)
    {
        double avg;
        int sum = 0;

        // סופר כמות ערכים בערך שמעל הממוצע
        int upperAvgCount = 0;

        // סופר כמות ערכים בערך שמתחת לממוצע
        int lowerAvgCount = 0;

        // מציאת סכום הערכים של המערך
        for (int i = 0; i < arr.Length; i++)
            sum += arr[i];

        avg = (double)sum / arr.Length;

        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] < avg)
                lowerAvgCount++;

            if (arr[i] > avg)
                upperAvgCount++;
        }

        if (upperAvgCount == lowerAvgCount)
            return true;        // המערך ממוין
        else
            return false;       // המערך אינו ממוין
    }


    static void Main()
    {
        bool isBalanced;

        // דוגמא למערך מאוזן
        int[] a = { 1, 1, 2, 3, 4, 1, 1, 1, 2, 2 };

        // דוגמא למערך שאינו מאוזן
        int[] b = { 5, 1, 2, 3, 4, 1, 1, 1, 2, 2 };

        isBalanced = BalancedTestForArray(a);
        Console.WriteLine("a[] " + isBalanced);

        isBalanced = BalancedTestForArray(b);
        Console.WriteLine("b[] " + isBalanced);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar23

using System;

class Program
{
    public static void GetArray(int[] arr, int n)
    {
        if (n % 2 == 0)
        {
            for (int i = 0; i < arr.Length; i+=2)
                Console.Write(arr[i] + " ");
        }
        else
        {
            for (int i = 1; i < arr.Length; i+=2)
                Console.Write(arr[i] + " ");
        }

        Console.WriteLine();
    }

    static void Main()
    {
        Random rnd = new Random();
        int[] a = { 2, 3, 5, 7, 18 };
        int num;

        num = rnd.Next(10);

        if (num % 2 == 0)
        {
            GetArray(a, num);
            GetArray(a, num - 1);
        }
        else
        {
            GetArray(a, num);
            GetArray(a, num - 1);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar24

using System;

// ד
/* קלט: מספר התלמידים, קולטת ציונים, מעדכנת על פי כלל הבונוס */
/* פלט: מעדכנת ע"י כלל הבונוס */
class Program
{
    const int NUMBEROFGRADES = 5;

    // א
    public static void TenPercentageIncrease(int[] grade)
    {
        int bonus = 10;
        int upDateGrade = 0;

        for (int i = 0; i < grade.Length; i++)
        {
            upDateGrade = grade[i] * bonus / 100;
            upDateGrade += grade[i];

            if (upDateGrade <= 100)
            {
                grade[i] = upDateGrade;
            }

            upDateGrade = 0;
        }
    }

    // ב
    /* קלט: מקבלת כקלט מספר התלמידים בכיתה */
    /* פלט: מחזירה את מערך הציונים */
    public static int[] GradesOfStudents(int numOfStudents)
    {
        int[] student = new int[numOfStudents];

        int[] grades = { 90, 83, 98, 78 };

        for (int i = 0; i < student.Length; i++)
        {
            for (int j = 0; j < grades.Length; j++)
            {
                Console.Write("Enter the grade of student " + (i + 1) + ": ");
                grades[j] = int.Parse(Console.ReadLine());
            }

            // חישוב הממוצע עם 10% בונוס
            TenPercentageIncrease(grades);

            Console.WriteLine();
            Console.Write("The grades of student " + (i + 1) + ": ");

            // פלט: מעדכנת ע"י כלל הבונוס
            PrintGrades(grades);
        }

        return grades;
    }

    // ג
    /* פלט: מדפיסה את ציוני תלמידי הכיתה */
    public static void PrintGrades(int[] grades)
    {
        Console.WriteLine("After 10% bonums");
        for (int i = 0; i < grades.Length; i++)
        {
            Console.Write(grades[i] + " ");
        }
        Console.WriteLine("\n");
    }
    
    
    
    static void Main()
    {
        int numStud = 2;
        int[] grd;

        // קלט: מספר התלמידים בכיתה
        Console.Write("Enter number of students: ");
        numStud = int.Parse(Console.ReadLine());
        Console.WriteLine();

        // קלט: קולטת ציונים
        grd = GradesOfStudents(numStud);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar25

using System;

class Program
{
    public static bool GetCharAndLength(char[] N, int len)
    {
        int count = 0;
        int firstNewIndex = 0, secondNewIndex = 0;
        int distance;

        for (int i = 0; i < N.Length; i++)
        {
            // '$' כמה פעמים מופיע התו
            if (N[i] == '$')
                count++;

            if (count == 1 && N[i] == '$')
                firstNewIndex = i;

            if (count > 1 && N[i] == '$')
                secondNewIndex = i;
        }

        distance = Math.Abs(firstNewIndex - secondNewIndex) + 1;

        if (len == distance)
            return true;
        else
            return false;
    }


    static void Main()
    {
        int len;
        //char[] w = { '$', '$', '$' };
        //char[] w = { 'd', 's', '4', '$', '$', '$', '4', 's', 'd' };
        char[] w = { 'a', 'b', 'c', '$', 'a', 'x', 'y', '$', 'b', 'x', 'a', '$', 'v' };
        Console.Write("Enter a number: ");
        len = int.Parse(Console.ReadLine());

        //GetCharAndLength(w, len);

        Console.WriteLine(GetCharAndLength(w, len));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar26

using System;

class Program
{
    // מחזירה 'אמת' או 'שקר' עבור מחצית הראשונה של המערך
    public static bool LeftSort(int[] leftArr)
    {
        bool isSortedLeft = false;
        int index = 0;

        for (int i = 0; i < leftArr.Length - 1; i++)
        {
            if (leftArr[i] <= leftArr[i + 1])
                index++;

            if (index == leftArr.Length - 1)
                isSortedLeft = true;
        }

        if (isSortedLeft == true)
            return true;
        else
            return false;
    }

    // מחזירה 'אמת' או 'שקר' עבור מחצית השנייה של המערך
    public static bool RightSort(int[] rightArr)
    {
        bool isSortedRight = false;
        int index = 0;

        for (int i = 0; i < rightArr.Length - 1; i++)
        {
            if (rightArr[i] <= rightArr[i + 1])
                index++;

            if (index == rightArr.Length - 1)
                isSortedRight = true;
        }

        if (isSortedRight == true)
            return true;
        else
            return false;
    }

    public static bool SortedArray(int[] arr)
    {
        bool isHalfSorted = false;
        int[] leftArr = new int[arr.Length / 2];
        int[] rightArr = new int[arr.Length / 2];
        int index = 0;

        // השמת ערכים למחצית המערך - השמאלי והימני
        for (int i = 0; i < arr.Length; i++)
        {

            if (i < arr.Length/2)
                leftArr[index] = arr[i];
            else
                if (arr.Length/2 <= i)
                    rightArr[index] = arr[i];

            if (index == arr.Length / 2 - 1)
            {
                index = -1;
            }
            index++;
        }

        if (RightSort(rightArr) == true || LeftSort(leftArr) == true)
            isHalfSorted = true;
        else
            isHalfSorted = false;

        return isHalfSorted;
    }

    static void Main()
    {
        //int[] arr = { 1, 1, 2, 3, 4, 1, 1, 7, 9, 2 };
        int[] arr = { 5, 1, 2, 3, 4, 19, 11, 13, 17, 2 };

        Console.WriteLine(SortedArray(arr));


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p26tar27

using System;

class Program
{
    static bool ZigZag(int[] a)
    {
        int i = 0;

        while (i < a.Length - 1)
        {
            if (i % 2 == 0)
            {
                if (a[i] >= a[i + 1])      
                {
                    return false;
                }
            }
            else
            {
                if (a[i] <= a[i + 1])
                {
                    return false;
                }
            }
            i++;
        }

        return true;
    }


    static void Main()
    {
        int[] a = { 2, 3, 4 };
        int[] arr = { 3, 1, 5, 3, 2, };

        bool isPlaceEmpty;

        isPlaceEmpty=ZigZag(a);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p28ex08

using System;

class Program
{
    const int N = 8;

    static void Main()
    {
        int j = 1, num;
        int[] numbers = new int[N];

        Console.Write("Enter a number: ");
        numbers[0] = int.Parse(Console.ReadLine());
        for (int i = 0; i < N; i++)
        {
            Console.Write("Enter a number: ");
            num = int.Parse(Console.ReadLine());

            if (num != numbers[j - 1])
            {
                numbers[j] = num;
                j++;
            }
        }

        for (int i = 0; i < j; i++)
        {
            Console.Write(" " + numbers[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p30ex09

using System;

class Program
{
    const int N = 8;
    static void Main()
    {
        int[] grd1 = new int[N] { 80, 60, 40, 96, 95, 55, 50, 100 };
        int[] grd2 = new int[N] { 80, 70, 50, 99, 100, 60, 50, 100 };
        int[] grd3 = new int[N];

        int j=0;

        //for (int i = 0; i < N; i++)
        //{
        //    Console.Write("Enter the first grade for student " + (i + 1));
        //    grd1[i] = int.Parse(Console.ReadLine());
        //}
        //for (int i = 0; i < N; i++)
        //{
        //    Console.Write("Enter the second grade for student " + (i + 1));
        //    grd2[i] = int.Parse(Console.ReadLine());
        //}

        for (int i = 0; i < N; i++)
        {
            if ((grd1[i] + grd2[i]) / 2 < 60)
            {
                grd3[j] = i + 1;
                j++;
            }
        }

        for (int i = 0; i < N; i++)
        {
            Console.Write(grd3[i] + " ");
        }


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p31tar29

using System;

class Program
{
    static void Main()
    {
        int[] a = { 3, 4, 8, 2, 1, 23, 30, 15, 16, 17 };
        int[] b = new int[a.Length];

        int j = 0, i = 0;

        while (i < 9)
        {
            if (Math.Abs(a[i] - a[i + 1]) == 1)
            {
                b[j] = a[i];
                j++;
                b[j] = a[i + 1];
                j++;
            }
            i++;
        }

        for (i = 0; i < b.Length; i++)
        {
            Console.Write(b[i] + " ");
        }


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p32tar30

using System;

class Program
{
    const int N = 8;

    static void Main()
    {
        int[] numbers = { 1, 2, 3, -4, 5, 6, -7, 8 };

        // מערך שיכיל את המספרים הזוגיים
        int[] evenNumbers = new int[N];

        // מערך שיכיל את המספרים השליליים
        int[] negativeNumbers = new int[N];

        int m = 0, n = 0;

        for (int i = 0; i < N; i++)
        {
            if (numbers[i] % 2 == 0 && numbers[i] > 0)
            {
                evenNumbers[m] = numbers[i];
                m++;
            }
            else if (numbers[i] < 0)
            {
                negativeNumbers[n] = numbers[i];
                n++;
            }
        }

        Console.WriteLine("#even");
        for (int i = 0; i < N; i++)
            Console.Write(evenNumbers[i] + " ");

        Console.WriteLine("\n#negative");
        for (int i = 0; i < N; i++)
            Console.Write(negativeNumbers[i] + " ");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p32tar31

using System;

class Program
{
    const int ALen = 8;
    const int BLen = 4;
    static void Main()
    {
        int[] a = { 1, 3, 4, 5, 6, 7, 8, 9, 13 };
        int[] b = { 23, 4, 7, 9, 15 };
        //int[] a = new int[ALen];
        //int[] b = new int[BLen];
        int[] c = new int[b.Length];
        int k = 0;

        //Console.Write("Enter a number for a[] array ");
        //for (int i = 0; i < ALen; i++)
        //    a[i] = int.Parse(Console.ReadLine());

        //Console.Write("Enter a number for b[] array ");
        //for (int i = 0; i < BLen; i++)
        //    b[i] = int.Parse(Console.ReadLine());

        for (int i = 0; i < c.Length; i++)
        {
            for (int j = 0; j < a.Length; j++)
            {
                if (b[i] == a[j])
                {
                    c[k] = b[i];
                    k++;
                }
            }
        }

        Console.WriteLine("The c[] array is:");
        for (int i = 0; i < c.Length; i++)
            Console.Write(" " + c[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p32tar32

using System;

class Program
{
    const int N = 4;
    static void Main()
    {
        // ספינות שהיו לפני טיפול האחרון
        //char[] boatHandle = { 'a', 'b', 'c', 'd' };

        // ספינות שהיו בטיפול האחרון
        //char[] boatLastHandle = { 'a', 'g', 'x', 'c' };

        bool isFinded;
        char[] boatHandle = new char[N];
        char[] boatLastHandle = new char[N];

        // The ships what be before last handle
        Console.WriteLine("# The ships what be before last handle:");
        for (int i = 0; i < N; i++)
            boatHandle[i] = char.Parse(Console.ReadLine());

        Console.WriteLine(new string('-', 50));
        // The ships what be last handle
        Console.WriteLine("# The ships what be before last handle:");
        for (int i = 0; i < N; i++)
            boatLastHandle[i] = char.Parse(Console.ReadLine());

        // איחוד הספינות
        char[] unionBoats = new char[2 * N];

        // חיתוך הספינות
        char[] intersectionBoats = new char[N];

        // ההפרש הסימטרי של שני הקבוצות של הסירות
        char[] symmetricDifferenceBoats = new char[2 * N];

        // איחוד של שני מערכים
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if (i == 0)
                    unionBoats[j] = boatHandle[j];
                else
                    unionBoats[j + 4] = boatLastHandle[j];
            }
        }

        int k = 0;
        // חיתוך של שני המערכים
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if (boatHandle[i] == boatLastHandle[j])
                {
                    intersectionBoats[k] = boatLastHandle[j];
                    k++;
                }
            }
        }

        ////////////////////////////////////////////////////////
        // מציאת הפרש בין האיחוד של הקבוצות לבין החיתוך של הקבוצות
        k = 0;
        for (int i = 0; i < 2 * N; i++)
        {
            isFinded = false;

            for (int j = 0; j < N; j++)
                if (unionBoats[i] == intersectionBoats[j])
                    isFinded = true;

            if (!isFinded)
            {
                symmetricDifferenceBoats[k] = unionBoats[i];
                k++;
            }
        }

        for (int i = 0; i < N; i++)
        {
            Console.Write(" " + symmetricDifferenceBoats[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p32tar33

using System;

class Program
{
    static void Main()
    {
        int m = 0, n = 0;

        // פרחים של כל המשתלה
        int[] flower1 = new int[] { 240, 120, 250, 117, 130, 225, 230, 231 };

        // פחרים שנבלו ממשפחה 1
        int[] flower2 = new int[8];

        // פרחים שלא נבלו ממשפחה 2 
        int[] flower3 = new int[8];


        for (int i = 0; i < flower1.Length; i++)
        {
            if (flower1[i] / 100 == 1)
            {
                flower2[m] = flower1[i];
                m++;
            }
            else
            {
                flower3[n] = flower1[i];
                n++;
            }
        }

        Console.Write("# flower1:");
        for (int i = 0; i < flower1.Length; i++)
            Console.Write("{0,5}", flower1[i]);

        Console.Write("\n\n# flower2:");
        for (int i = 0; i < flower2.Length; i++)
            Console.Write("{0,5}", flower2[i]);

        Console.Write("\n\n# flower3:");
        for (int i = 0; i < flower1.Length; i++)
            Console.Write("{0,5}", flower3[i]);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p33ex10

using System;

class Program
{
    // קבוע - גודל המערך
    const int N = 71;

    static void Main()
    {

        int[] counter = new int[N]; // מערך מונים
        int i;          // משתנה הלולאה
        int num;        // מספר המתעמלים
        int age;        // גילו של כל מתעמל
        int maxIndex;   // הערך של האיבר המקסימלי במערך

        // לולאה לאיפוס מערך המונים
        for (i = 0; i < N; i++)
            counter[i] = 0;

        Console.WriteLine("Type number of gymnasts ");
        num = int.Parse(Console.ReadLine());
        for (i = 0; i < num; i++)
        {
            age = int.Parse(Console.ReadLine());

            // מניה של כל גיל על-ידי הגדלת ערכו של התא המתאים ב-1
            counter[age]++;
        }

        // (לולאה למציאת הגיל שיש בו הכי הרבה נרשמים (מקסימלי
        maxIndex = 1;
        for (i = 2; i < N; i++)
            if (counter[i] > counter[maxIndex])
                maxIndex = i;

        // הדפסת הגילאים שיש הכי הרבה נרשמים
        Console.WriteLine("The common ages are:");
        for (i = 1; i < N; i++)
            if (counter[i] == counter[maxIndex])
                Console.Write(i + ", ");

        // הדפסת הגילאים שאין להם נרשמים
        Console.WriteLine("The common ages are:");
        for (i = 1; i < N; i++)
            if (counter[i] == 0)
                Console.Write(i + ", ");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p35ex11

using System;

class Program
{
    const int N = 6;

    /* טענת כניסה: הפעולה קולטת את מספר הילדים בכל משפחה */
    /* טענת יציאה: הפעולה צוברת את מספר הילדים לפי קומות, ומחזירה את המערך הצובר */
    static int[] NumOfChildren()
    {
        int[] a = new int[N];

        int num;
        for (int i = 0; i < a.Length; i++)
            a[i] = 0;

        for (int i = 5; i <= 10; i++)
        {
            Console.WriteLine("Enter num of children in floor " + i);
            for (int j = 0; j < 6; j++)
            {
                num = int.Parse(Console.ReadLine());
                a[i - 5] += num;
            }
        }

        return a;
    }


    /* טענת כניסה: הפעולה מקבלת מערך הילדים לפי קומות */
    /* טענת יציאה: הפעולה מחזירה את הקומה שבה מספר הילדים הוא מקסימלי */
    static int Max1(int[] a)
    {
        int max = 0;
        for (int i = 1; i < a.Length; i++)
            if (a[i] > a[max])
                max = i;

        return max;
    }



    /* קלט: מספר ילדים בכל אחת מ-6 המשפחות ב-5 קומות */
    /* פלט: הקומות בהן מספר הילדים הוא הגדול ביותר */

    static void Main()
    {
        int[] a = NumOfChildren();
        int max = Max1(a);

        Console.WriteLine("The floor are:");
        for (int i = 0; i < a.Length; i++)
            if (a[max] == a[i])
                Console.WriteLine(i + 5);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p37tar34

using System;

class Program
{
    static void Main()
    {
        Random rnd = new Random();
        int[] a = new int[11];
        int num;

        for (int i = 0; i < 1000; i++)
        {
            num = rnd.Next(1, 11);
            a[num] = a[num] + num / num;
            //a[num-1] += num / num;
        }

        //for (int i = 0; i < 1000; i++)
        //{
        //    num = rnd.Next(1, 13);

        //    if (num <= 10)
        //        a[num - 1] = a[num - 1] + 1;
        //}

        for (int i = 0; i < a.Length; i++)
            Console.Write(a[i] + " ");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p37tar35

using System;

class Program
{
    const int F = 30;   // מציין מספר הקומות בבניין - F הקבוע
    const int M = 7;    // מציין מספר המשרדים בקומה - M הקבוע

    static void Main()
    {
        int count = 0;
        int[] cabinet = new int[F * M];
        int[] cabinetsInFloor = new int[F];

        //for (int i = 0; i < cabinetsInFloor.Length; i++)
        //    cabinetsInFloor[i] = 0;

        //for (int i = 0; i < cabinet.Length; i++)
        //    cabinet[i] = 0;

        int num;

        for (int i = 0; i < F; i++)
        {
            Console.WriteLine("# " + (i + 1) + " floor ");
            for (int j = 0; j < M; j++)
            {
                // מספר העובדים במשרד
                num = int.Parse(Console.ReadLine());

                cabinet[count] = num;
                count++;

                // עובדים num ית יש-i-של הקומה ה (cabinet) במשרד
                cabinetsInFloor[i] += num;
            }

            // א - סה"כ העובדים בכל קומה
            Console.WriteLine("in floor " + (i + 1) + " there are " + cabinetsInFloor[i] + " - workers");
        }

        Console.WriteLine();

        // ב - מספר הקומה שיש בה הכי פחות עובדים ומספר העובדים בקומה זו
        int min = 0;
        for (int i = 0; i < F; i++)
        {
            if (cabinetsInFloor[i] < cabinetsInFloor[min])
                min = i;
        }
        Console.WriteLine("the floor with minimum workers is: " + (min + 1) + " and workers are: " + cabinetsInFloor[min]);

        Console.WriteLine();

        // ג - מציג את מספר המשרד והקומה של המשרד שיש בו מספר העובדים הכי הרבה
        int max = 0, maxWorkers = 0;
        for (int i = 1; i < F; i++)
            if (cabinetsInFloor[i] > cabinetsInFloor[max])
                max = i;

        //max = max + 1;
        Console.WriteLine("the floor with maximum workers is: " + (max + 1) + " and workers are: " + cabinetsInFloor[max]);

        Console.WriteLine();
        cabinet[0] = maxWorkers;
        for (int i = 1; i < M * F; i++)
        {
            if (cabinet[i] > maxWorkers)
                maxWorkers = cabinet[i];
        }

        Console.WriteLine("the cabinet with max number of workers is: " + maxWorkers + " and the floor is: " + (max + 1));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p37tar36

using System;

class Program
{
    // מייצג את מספרה של ההצגה N המספר הקבוע
    const int N = 15;

    static void Main()
    {
        int cards = 0;
        int j = 1;
        int[] show = new int[N];   // הצגה
        
        Console.WriteLine("The number of shows: between [1-15]");
        Console.WriteLine("For stop the programm <enter 0 for number of show>");

        do
        {
            show[j - 1] += cards;

            Console.Write("enter an amount of cards: ");
            cards = int.Parse(Console.ReadLine());      // כמה כרטיסים התלמיד רוצה לקנות

            Console.Write("enter a number of show: ");
            j = int.Parse(Console.ReadLine());          // לאיזה מספר של הצגה

        } while (j != 0);

        Console.WriteLine();

        // האלגוריתם מציג את מספר הכרטיסים שנדרשים לכל הצגה
        // מספר ההצגות הנמכרות ביותר
        for (int i = 0; i < N; i++)
            Console.WriteLine("For show " + (i + 1) + " we have " + show[i] + " cards");



        Console.ReadKey();
    }
}

*******************************************************************************************************
// p37tar37

using System;

class Program
{
    // N - (מספר התלמידים (אוכלוסיה
    const int N = 200;
    static void Main()
    {
        int grade = 0;
        int[] student = new int[N];   // הצגה
        int[] studentGrades = new int[N];

        Console.WriteLine("Enter the grade of students: 0-100");
        // inserting grades
        for (int i = 0; i < N; i++)
        {
            grade = int.Parse(Console.ReadLine());

            // חיבור ציונים זהים
            student[grade] += grade;

            // שכיחות הציונים
            studentGrades[grade]++;
        }

        // ציון השכיח - זהו המספר שנספר הכי הרבה מכל הרשימה שנקלטה
        int fMax = 0;   // השכיחות
        for (int i = 0; i < N; i++)
            if (fMax < studentGrades[i])
                fMax = studentGrades[i];

        // חישוב טווח הציונים 0-9, 10-19,..., 90-100 הגדול ביותר
        //int count = 0;
        for (int i = 101 - 1; i >= 0; i--)
        {
            if (i % 10 == 0)
            {
                Console.WriteLine("(" + i + "-" + (i - 10) + ")");
                int j = 0;
                while (j != 10)
                {
                    Console.WriteLine("grade is: " + (i-j) + ", sum of grades: " + studentGrades[i]);
                    j++;
                }
            }
        }
        Console.WriteLine("F = " + fMax);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p38tar40

using System;

class Program
{
    static void Main()
    {
        int[] a = new int[10];
        Random randNum = new Random();

        int num;
        for (int i = 0; i < 9; i++)
        {
            num = randNum.Next(1, 10);
            //a[num] = a[num] + num / num;
            a[num-1] += num / num;
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p38ex12

using System;

class Ch1Solve12Letters
{
    const int N = 26;

    static void Main()
    {
        int[] letters = new int[N];
        int maxIndex;
        char ch, maxIndexLet;

        for (int i = 0; i < N; i++)
            letters[i] = 0;

        for (int i = 0; i < 100; i++)
        {
            Console.Write("Enter a letter:  ");
            ch = char.Parse(Console.ReadLine());
            letters[ch - 'a']++;
        }

        maxIndex = 0;
        for (int i = 1; i < letters.Length; i++)
        {
            if (letters[i] > letters[maxIndex])
                maxIndex = i;
        }

        maxIndexLet = (char)(maxIndex + 'a');
        Console.WriteLine("The most frequent letter is " + maxIndexLet);
        Console.WriteLine("The letters that did not appear are:");

        for (int i = 0; i < letters.Length; i++)
        {
            if (letters[i] == 0)
                Console.WriteLine((char)(i + 'a'));
        }


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p40tar41

using System;

class Program
{
    static int Vitamins(bool[] cereal)
    {
        int count = 0;
        for (int i = 0; i < cereal.Length; i++)
        {
            if (cereal[i])
                count++;
            //else
            //    count--;
        }

        return count;
    }

    static void VitaminsPrint(bool[] cereal)
    {
        int num;
        char ch;

        for (int i = 0; i < cereal.Length; i++)
        {
            if (cereal[i])
            {
                num = (int)'a' + i;
                ch = (char)num;
                Console.Write(ch + " ");
                //letter[i] = (char)num;
                //Console.Write(letter[i] + " ");
            }
        }
    }

    static void Main()
    {
        bool[] cereal = new bool[5];
        char[] letter = new char[5];
        char ch;


        for (int i = 0; i < letter.Length; i++)
        {
            ch = char.Parse(Console.ReadLine());
            letter[ch - 'a'] = '+';
        }

        Console.WriteLine();

        for (int i = 0; i < letter.Length; i++)
        {
            if (letter[i] == '+')
                cereal[i] = true;
        }

        VitaminsPrint(cereal);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p41tar42

using System;

class Program
{
    //public static char[] GetWord(int[] arr)
    //{
    //    char[] ch = new char[9];
    //    int[] indexArr = new int[26];
    //    int reminder, divider;

    //    for (int i = 0; i < 26; i++)
    //    {
    //        if (arr[i] != 0)
    //        {
    //            if (arr[i] > 9)
    //            {
    //                reminder = arr[i] % 10;
    //                divider = arr[i] / 10;
    //            }
    //            else
    //            {
    //                //ch['a' + i] = (char)arr[i];
    //            }
    //        }
    //    }


    //    return ch;
    //}

    public static char[] GetWord(int[] arr)
    {
        char[] ch = new char[9];
        int rem, div;

        for (int i = 0; i < ch.Length; i++)
        {
            ch[i] = ' ';
        }

        for (int i = 0; i < 26; i++)
        {
            if (arr[i] != 0)
            {
                if (arr[i] > 9)
                {
                    rem = arr[i] % 10;
                    div = arr[i] / 10;
                    ch[rem] = (char)('a' + i);
                    ch[div] = (char)('a' + i);
                }
                else
                {
                    ch[arr[i]] = (char)('a' + i);
                    //ch['a' + i] = (char)arr[i];
                }
            }
        }

        return ch;
    }

    static void Main()
    {
        char[] word = new char[9];
        int[] myArr = new int[26];

        // enter a number 1 between 99
        //myArr[4] = 2;
        //myArr[7] = 1;
        //myArr[11] = 34;
        //myArr[14] = 5;
        myArr[3] = 13;
        myArr[8] = 2;


        word = GetWord(myArr);


        for (int i = 0; i < word.Length; i++)
        {
            Console.WriteLine(word[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p41tar43

using System;

class Program
{
    public static int MaxLength(char[] chArr)
    {
        int len = 0;


        return len;
    }
    public static char[] GetLetter(char[] chArr)
    {
        char[] letter = new char[7];
        int[] count = new int[7];
        int i = 0;
        int counter = 0;

        Console.WriteLine("Enter letters for char array");
        letter[0] = char.Parse(Console.ReadLine());
        while (letter[i] != '*')
        {
            i++;

            letter[i] = char.Parse(Console.ReadLine());

            if (letter[i - 1] == letter[i])
            {
                count[letter[i] - 'a']++;
            }
            else
            {
                count[letter[i - 1] - 'a']++;
            }

            //i++;
        }

        return letter;
    }

    public static char[] GetCharArray()
    {
        char[] letter = new char[1];
        int[] count;
        int i = 0;

        Console.WriteLine("Enter letters for char array");
        letter[0] = char.Parse(Console.ReadLine());
        while (letter[i] != '*')
        {
            i++;
            letter = new char[i + 1];
            count = new int[i + 1];

            letter[i] = char.Parse(Console.ReadLine());
            if (letter[i - 1] == letter[i])
                count[letter[i] - 'a']++;
            else
                count[letter[i - 1] - 'a']++;
        }

        return letter;
    }

    public static void PrintLetters(char[] chArr)
    {
        for (int i = 0; i < chArr.Length; i++)
        {
            Console.Write("({0}, {1}) ", chArr[i], (int)char[chArr]);
        }
    }

    static void Main()
    {
        char[] letters = new char[7];
        //letters[0] = 'd';
        //letters[1] = 'a';
        //letters[2] = 'e';
        //letters[3] = 'e';
        //letters[4] = 'e';
        //letters[5] = 'g';
        //letters[6] = 'g';

        //for (int i = 0; i < letters.Length; i++)
        //{
        //    Console.Write("{0} ", letters[i]);
        //}

        char[] answer = new char[7];
        answer = GetLetter(letters);

        // -----------------------------------------
        char[] let = GetCharArray();

        PrintLetters(let);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p41tar44

using System;


class Program
{
    public static void PrintMessage()
    {
        
    }
    public static void GetCharArray(char[] chArr)
    {
        bool[] isLetter = new bool[6];
        int count = 0;
        bool isWord = true;

        for (int i = 0; i < chArr.Length; i++)
        {

            switch (chArr[i])
            {
                case 'a':
                case 'e':
                case 'i':
                case 'o':
                case 'u':
                    {
                        count = 0;
                        isLetter[i] = true;
                        break;
                    }
                default:
                    {
                        if (chArr[i] > 'a' && chArr[i] < 'z')
                        {
                            isLetter[i] = true;
                            count++;
                            if (count > 2)
                                isWord = false;
                        }
                        else
                        {
                            isLetter[i] = false;
                        }
                        break;
                    }
            }
        }

        int j = 0;

        if (!isWord)
            Console.WriteLine("The sentence doesn't legal");
        
        while (isWord && j < chArr.Length)
        {
            Console.Write("{0} ", chArr[j]);
            j++;
        }

    }

    static void Main()
    {
        char[] abc = new char[6];

        for (int i = 0; i < 6; i++)
        {
            abc[i] = char.Parse(Console.ReadLine());
        }

        GetCharArray(abc);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p42ex13

using System;

class Program
{
    static bool Orly(int[] a)
    {
        int i = 1, count, j;
        bool flag = true, contin = true;

        while (i < a.Length - 1)
        {
            contin = true;
            count = 0;
            j = i;
            while (contin && i < a.Length - 1)
            {
                if (a[i] == a[i + 1])
                {
                    i++;
                    count++;
                }
                else
                {
                    contin = false;
                }
            }
            if (count > 0)
            {
                for (int k = j; k < i; k++)
                {
                    a[k] = 0;
                }
                flag = false;
            }
            i++;
        }

        return flag;
    }

    static bool Orr(int[] a)
    {
        bool flag = true;

        for (int i = 1; i < a.Length - 1; i++)
        {
            if (a[i] == a[i + 1])
            {
                a[i] = 0;
                flag = false;
            }
        }

        return flag;
    }


    static void Main()
    {
        int[] arrOrly = { 11, 2, 2, 3, 17, 5, 19, 7, 8, 9, 10 };
        int[] arrOrr = { 11, 2, 2, 3, 17, 5, 19, 7, 8, 9, 10 };
        bool b1, b2;

        b1 = Orly(arrOrly);
        b2 = Orr(arrOrr);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p43ex14

using System;

class Program
{
    // --------------------- פתרון א
    /* טענת כניסה: הפעולה מקבלת מערך חד-ממדי */
    /* טענת יציאה: הפעולה מחזירה את מיקומו של המקסימלי במערך */
    static int Max1(int[] a)
    {
        int place = 0;

        for (int i = 1; i < a.Length; i++)
            if (a[i] > a[place])
                place = i;

        return place;
    }

    /* טענת כניסה: הפעולה מקבלת מערך ואת מיקומו של האיבר המקסימלי במערך */
    /* טענת יציאה: הפעולה מחזירה את מיקומו של האיבר השני בגודלו במערך */
    static int Max2(int[] a, int j)
    {
        int place;

        if (j != 0)
            place = 0;
        else
            place = 1;

        for (int i = 1; i < a.Length; i++)
            if (a[i] > a[place])
                if (i != j)
                    place = i;

        return place;
    }


    // --------------------- פתרון ב
    /* טענת כניסה: הפעולה מקבלת מערך חד-ממדי */
    /* טענת יציאה: הפעולה מדפיסה את המקסימלי במערך ואת השני בגודלו */
    static void FindBoth(int[] a)
    {
        int place1, place2;

        if (a[0] > a[1])
        {
            place1 = 0;     // התא הראשון הוא המקסימלי הנוכחי
            place2 = 1;     // התא השני הוא השני בגודלו הנוכחי
        }
        else
        {
            place1 = 1;     // התא השני הוא המקסימלי הנוכחי
            place2 = 0;     // התא הראשון הוא השני בגודלו הנוכחי
        }

        for (int i = 2; i < a.Length; i++)
        {
            if (a[i] > a[place1])   // הנוכחי הגדול ביותר
            {
                place2 = place1;    // השני בגודלו הוא הגדול הקודם
                place1 = i;         // הגדול הוא הנוכחי
            }
            else
                if (a[i] > a[place2])   // הנוכחי הוא השני בגודלו
                    place2 = i;         // קטן מהגדול וגדול מהשני
        }

        Console.WriteLine("The first max is: " + a[place1]);
        Console.WriteLine("The second max is: " + a[place2]);

    }


    static void Main()
    {
        // ---------------------------------------------------------- פתרון א
        //int[] arr1 = new int[int.Parse(Console.ReadLine())];
        int place1, place2;

        int[] arr1 = { 11, 2, 13, 3, 17, 5, 19, 7 };

        //for (int i = 0; i < arr1.Length; i++)
        //    arr1[i] = int.Parse(Console.ReadLine());

        place1 = Max1(arr1);
        Console.WriteLine("The first max is: " + arr1[place1]);

        place2 = Max2(arr1, place1);
        Console.WriteLine("The second max is: " + arr1[place2]);

        // ---------------------------------------------------------- פתרון ב
        FindBoth(arr1);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p44tar45

using System;

class Program
{

    static bool GetArrAndNum(int[] a, int n)
    {
        bool isFind = false;

        for (int i = 0; i < a.Length; i++)
            if (a[i] == n)
                isFind = true;

        return isFind;
    }

    static void Main()
    {
        int[] arr = { 2, 3, 5, 7, 11, 13, 17, 19 };
        int num = 9;
        bool find;

        find = GetArrAndNum(arr, num);

        if (find)
            Console.WriteLine("The " + num + " number in array");
        else
            Console.WriteLine("The " + num + " number isn't in array");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p44tar46

using System;

class Program
{
    public static int GetTwoArray(int[] a, int[] b)
    {
        int len, common = 0;
        bool flag = true;
        int i = 0, j = 0;

        len = a.Length * b.Length;
        while (flag)
        {
            if (a[i] == b[j])
            {
                common = a[i];
                flag = false;
            }
            else
                i++;

            if (i == a.Length)
            {
                i = 0;
                j++;
            }
        }

        return common;
    }


    static void Main()
    {
        int[] arr1 = { 2, 3, 5, 7, 11, 13, 17, 19 };
        int[] arr2 = { 1, 4, 7, 9, 12, 15, 16, 17 };

        int commonDigit;

        commonDigit = GetTwoArray(arr1, arr2);

        Console.WriteLine(commonDigit);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p44tar47

using System;

class Program
{
    static void Main()
    {
        int[] a1 = { 1, 3, 2, 4, 9 };
        int[] a2 = { 2, 1, 3, 1 };
        int[] a3 = new int[5];

        int i = 0, j = 0, mult = 1;

        while (i < a1.Length)
        {
            mult = a1[i] * a2[j];
            a3[i] = a3[i] + mult;
            j++;

            if (j == a2.Length)
            {
                j = 0;
                i++;
            }
        }

        for (int k = 0; k < a3.Length; k++)
        {
            Console.WriteLine("a3[{0}] = {1}", k, a3[k]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p45tar48

using System;

class Program
{
    static void Main()
    {
        int[] numbers = { 5, 0, 4, 1, 2, 3 };
        char[] letters = { 'h', 'l', 'o', 'm', 'a', 's' };
        char[] word = new char[6];
        int j = 0;

        for (int i = 0; i < numbers.Length * letters.Length; i++)
        {
            if (numbers[j] == i)
            {
                word[j] = letters[i];
                j++;
            }

            if (i == letters.Length - 1)
                i = -1;

            if (j == word.Length)
                break;
        }

        // printing new array
        for (int i = 0; i < word.Length; i++)
            Console.WriteLine(word[i]);



        Console.ReadKey();
    }
}

*******************************************************************************************************
// p45tar49

using System;

class Program
{
    static int MaxSequence(int[] arr)
    {

        int[] arrNumber = new int[8];
        int[] maxSequence = new int[8];
        int tempCount = 1, count = 1;
        int j = 0, maxNumber = 0;

        for (int i = 1; i < arr.Length; i++)
        {
            if (arr[i - 1] == arr[i])
            {
                tempCount++;
            }
            else
            {
                if (tempCount >= count)
                {
                    count = tempCount;
                    arrNumber[j] = arr[i - 1];
                    maxSequence[j] = count;
                    tempCount = 1;
                    j++;
                }
            }
        }

        for (int i = 1; i < maxSequence.Length; i++)
        {
            if (maxSequence[i - 1] < maxSequence[i])
                maxNumber = arrNumber[i];

        }
        return maxNumber;
    }


    static void PringNumber()
    {

    }

    static void Main()
    {
        int[] arr = { 2, 2, 1, 7, 7, 7, 7, 5 };
        int max = 0;
        max = MaxSequence(arr);

        Console.WriteLine("The number of biggest sequence is: {0}", max);
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p45tar50

using System;

class Program
{
    const int N = 10;

    static void Main()
    {
        int[] heart = new int[N];
        int countA = 1, countB = 1;

        //for (int i = 0; i < N; i++)
        //{
        //    Console.Write("Enter pulse of heart ");
        //    heart[i] = int.Parse(Console.ReadLine());
        //}

        heart = new int[] { 150, 120, 88, 113, 155, 152, 153, 77, 75, 80 };

        for (int i = 1; i < N; i++)
        {
            if (heart[i - 1] > 150 && heart[i] > 150)
            {
                countA++;
                if (countA == 3)
                {
                    Console.WriteLine("The pulse of heart it hight");
                    break;
                }
                countB = 1;
            }

            if (heart[i - 1] < 80 && heart[i] < 80)
            {
                countB++;
                if (countB == 3)
                {
                    Console.WriteLine("The pulse of heart it Low");
                    break;
                }
                countA = 1;
            }
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p45tar51

using System;

class Program
{
    const int N = 7;

    public static int[] SortArray(int[] arr)
    {
        int temp;
        int count = 1;

        for (int i = 1; i < N * N; i++)
        {
            if (arr[i - 1] > arr[i])
            {
                temp = arr[i - 1];
                arr[i - 1] = arr[i];
                arr[i] = temp;
            }

            if ((i + 1) % N == 0)
            {
                i = 0;
                count++;
            }
            if (count == 7) break;
        }

        return arr;
    }

    static void Main()
    {
        int[] arr = new int[N] { 5, 2, 9, 4, 1, 6, 3 };
        int[] tmura = new int[N];
        bool isTmura = true;

        tmura = SortArray(arr);

        for (int i = 1; i < N; i++)
        {
            if (tmura[i - 1] + 1 != arr[i])
            {
                isTmura = false;
                break;
            }
        }

        if (isTmura)
            Console.WriteLine("Tmura");
        else
            Console.WriteLine("Not Tmura");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p45tar52

using System;

class Program
{
    const int N = 80;

    // Methods
    public static int[] GetAverage(int[] avg, int[] passed)
    {
        int j = 0;

        for (int i = 0; i < avg.Length; i++)
        {
            Console.Write("Enter your average ");
            avg[i] = int.Parse(Console.ReadLine());
            if (avg[i] >= 80)
            {
                passed[j] = i;
                j++;
            }
        }

        return avg;
    }
    public static int[] SplitArray(int[] arr)
    {
        int[] newArray;
        int count = 0;


        for (int i = arr.Length - 1; i > 0; i--)
        {
            if (arr[i] == 0)
                count++;
            else
                break;
        }
        newArray = new int[arr.Length - count];
        for (int i = 0; i < newArray.Length; i++)
        {
            newArray[i] = arr[i];
        }

        return newArray;
    }
    public static void Print(int[] arr1, char[] arr2)
    {
        for (int i = 0; i < arr2.Length; i++)
        {
            switch (arr2[i])
            {
                case 'y':
                    Console.WriteLine("student " + (arr1[i] + 1) + " registered for graduate MBA");
                    break;
                case 'n':
                    Console.WriteLine("student " + (arr1[i] + 1) + " not registered for graduate to MBA");
                    break;
            }
        }
    }


    static void Main()
    {
        int[] avg = new int[N];
        int[] passed = new int[N];
        char[] answer;

        //------------------------------------------------- get average above 80 of the students 
        avg = GetAverage(avg, passed);

        passed = SplitArray(passed);
        answer = new char[passed.Length];

        Console.WriteLine("\nIf you're like to register for graduate MBA");
        for (int i = 0; i < passed.Length; i++)
        {
            Console.Write("press 'y' / 'n': ");
            answer[i] = char.Parse(Console.ReadLine());
        }

        //------------------------------------------------- print
        Print(passed, answer);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p46tar53

using System;

class Program
{
    public static bool Simetri(int[] a)
    {
        int sum1 = 0, sum2 = 0;

        for (int i = 0; i < a.Length/2; i++)
        {
            sum1 += a[i];
            sum2 += a[(a.Length - 1) - i];
            //if (sum1 != sum2)
            //    return true;
        }

        if (sum1 == sum2)
            return true;
        else
            return false;
    }
    static void Main()
    {
        int[] a = new int[] { 10, 2, 8, 5, 3, 12 };
        bool isSimetric;

        isSimetric = Simetri(a);

        if (isSimetric)
            Console.WriteLine("Array is simetri");
        else
            Console.WriteLine("Array isn't simetri");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p46tar54

using System;

class Program
{
    public static int GetSetGrpoup(int[] arr)
    {
        int a1 = arr[0];
        int countRange = 1;

        for (int i = 1; i < arr.Length; i++)
        {
            if (a1 != arr[i])
                countRange++;
            else
                break;
        }

        return countRange;
    }
    public static bool IsSerialArray(int[] arr, int[] partArr, int d)
    {
        int j = 0;

        for (int i = 0; i < arr.Length; i++)
        {
            if (partArr[j] == arr[i] && (arr.Length % d == 0))
            {
                j++;
                if (j == d)
                    j = 0;
            }
            else
                return false;
        }

        return true;
    }

    public static void Print(int[] arr, int[] partArr, int d)
    {
        
        if (IsSerialArray(arr, partArr, d))
            Console.WriteLine("Serial Array");
        else
            Console.WriteLine("Not Serial Array");
    }
    public static void Print(bool b)
    {
        if (b)
            Console.WriteLine("Serial Array");
        else
            Console.WriteLine("Not Serial Array");
    }
    static void Main()
    {
        //--------------------------------------- דוגמאות למעכים סדרתיים
        //int[] arr = new int[] { 1, 2, 5, 1, 2, 5, 1, 2, 5 };
        //int[] arr = new int[] { 3, 6, 3, 6, 3, 6 };
        //int[] arr = new int[] { 3, 5, 12, 15, 3, 5, 12, 15, 3, 5, 12, 15 };

        //--------------------------------------- דוגמאות למערכים שאינם סדרתיים
        //int[] arr = new int[] { 4, 2, 1, 4, 1, 2, 4, 2, 1 };
        int[] arr = new int[] { 4, 2, 1, 4, 2, 1, 4, 2 };
        int[] partArr;
        int d;
        bool flag;

        d = GetSetGrpoup(arr);
        
        partArr = new int[d];
        for (int i = 0; i < d; i++)
            partArr[i] = arr[i];


        Print(arr, partArr, d);     // first Print method is running...

        flag = IsSerialArray(arr, partArr, d);
        Print(flag);                // second Print methos is running...

        if (IsSerialArray(arr, partArr, d))
            Console.WriteLine("Serial Array");
        else
            Console.WriteLine("Not Serial Array");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p46tar55

using System;

class Program
{
    // "מערך "מוכל ברצף
    public static bool IsArraySequenceContained(int[] a, int[] b)
    {
        int j = 0, count = 0;

        for (int i = 0; i < a.Length * b.Length; i++)
        {
            if (a[j] == b[i])
            {
                count++;
                if (count == a.Length)
                    return true;
                j++;
            }
            else
            {
                j = 0;
                count = 0;
            }
        }

        return false;
    }

    // "מערך "מוכל שלא ברצף
    public static bool IsArrayNotSequenceContained(int[] b, int[] c)
    {
        int j = 0, count = 0;

        for (int i = 0; i < c.Length; i++)
        {
            if (b[j] == c[i])
            {
                count++;
                if (count == b.Length)
                    return true;
                j++;
            }
        }

        return false;
    }


    static void Main()
    {
        int[] a = new int[] { 1, 3, 5, 7, 9, 2 };
        int[] b = new int[] { 1, 2, 3, 1, 3, 5, 7, 9, 2, 1, 8, 9 };
        int[] c = new int[] { 2, 1, 2, 3, 4, 4, 5, 2, 7, 9, 1, 2, 8 };

        bool isFind = false;

        isFind = IsArraySequenceContained(a, b);
        if (isFind)
            Console.WriteLine("Array a is \"Sequence Contained\" to array b");

        isFind = false;
        isFind = IsArrayNotSequenceContained(a, c);
        if (isFind)
            Console.WriteLine("Array a is \"Contained what Not Sequence\" to array b");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p52ex01

using System;

class Program
{
    const int N = 8;

    static void Main()
    {
        char[,] board = new char[N, N];

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if ((i + j) % 2 == 0)
                    board[i, j] = 'b';
                else
                    board[i, j] = 'w';
            }
        }

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                Console.Write(board[i, j] + " ");
            }
            Console.WriteLine();
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p53ex02

using System;

class Ch2Solve2Army
{
    const int C = 3, M = 4;

    static int Mahlaka(int[,] p, int i)
    {
        int sum = 0;

        for (int j = 0; j < M; j++)
            sum += p[i, j];

        return sum;
    }

    /* p מקבל את ערך הפלוגה Max טענת כניסה: הפעולה */
    /* טענת יציאה: הפעולה מחזירה את האיבר המקסימלי */
    static int Max(int[,] p)
    {
        int big = 0;

        for (int i = 0; i < C; i++)
            for (int j = 0; j < M; j++)
                if (p[i, j] > big)
                    big = p[i, j];

        return big;
    }

    /* p מקבלת את מערך הפלוגה PrintPluga טענת הכניסה: הפעולה */
    /* טענת יציאה: הפעולה מדפיסה את מספר החיילים בכל מחלקה ואת מספר החיילים בכל הפלוגה */
    static void PrintPluga(int[,] p)
    {
        int num, sum = 0;

        for (int i = 0; i < C; i++)
        {
            num = Mahlaka(p, i);

            Console.WriteLine("There are " + num + " soldiers in mahlaka " + (i + 1));
        }

        Console.WriteLine("There are " + sum + " soldiers in the pluga");
    }


    static void Main()
    {
        int[,] p = new int[C, M];
        //int[,] p = new int[,] { { 50, 55, 60 }, { 38, 60, 45 }, { 37, 40, 57 }, { 60, 44, 55 } };
        // מספר החיילים המקסימלי בכיתה
        int maxi;

        for (int i = 0; i < C; i++)
        {
            for (int j = 0; j < M; j++)
            {
                Console.Write("Enter the number of soldiers in mahlaka " + (i + 1) + " kitah " + (j + 1) + " ");
                p[i, j] = int.Parse(Console.ReadLine());
            }
        }

        PrintPluga(p);
        
        maxi = Max(p);
        Console.WriteLine("The max number of soldiers in kitah " + maxi);
        for (int i = 0; i < C; i++)
            for (int j = 0; j < M; j++)
                if (p[i, j] == maxi)
                    Console.WriteLine("Mahlaka " + i + " kitah " + j);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p55ex03

using System;

class Ch2Solve3
{
    static void Main()
    {
        //char[,] m = new char[int.Parse(Console.ReadLine()), int.Parse(Console.ReadLine())];
        char[,] m = { { 'i', 'm', 'a' }, { 'i', 's', 'b' }, { 's', 's', 'e' } };

        int count = 0;

        //for (int i = 0; i < m.GetLength(0); i++)
        //    for (int j = 0; j < m.GetLength(1); j++)
        //        m[i, j] = char.Parse(Console.ReadLine());

        for (int i = 0; i < m.GetLength(0)-1; i++)
        {
            for (int j = 0; j < m.GetLength(1)-1; j++)
            {
                if (m[i, j] == m[i, j + 1])
                    count++;
                if (m[i, j] == m[i + 1, j])
                    count++;
            }
        }

        int lastRow = m.GetLength(0) - 1;
        for (int j = 0; j < m.GetLength(1)-1; j++)
        {
            if (m[lastRow, j] == m[lastRow, j + 1])
                count++;
        }

        int lastCol = m.GetLength(1) - 1;
        for (int i = 0; i < m.GetLength(0)-1; i++)
        {
            if (m[i, lastCol] == m[i + 1, lastCol])
                count++;
        }

        Console.WriteLine(count);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p57ex04

using System;

class Ch2Solve4Matara
{
    const int N = 5;

    /* m טענת כניסה: הפעולה מקבלת מטריצה */
    /* אחרת false אם איברי האלכסון הראשי יכולים להוות לוח קליעה תקין, או true טענת יציאה: הפעולה מחזירה */
    static bool CheckProportion(int[,] m)
    {
        int i = 0;

        while (i < N / 2)                       // כדי שהמסגרות תהיינה מסודרות ביחס עולה, אברי האלכסון
        {                                       // הראשי צריכים להיות ממויניים בסדר עולה עד למרכז האלכסון
            if (m[i, i] >= m[i + 1, i + 1])     // אם כל אברי המסגרת שווים, יוצא שבהכרח אברי האלכסון
                return false;                   // ממרכז ועד הסוף יהיו ממוינים בסדר יורד
            i++;
        }
        return true;
    }

    /* value וערך הנמצא במסגרת ,row מספר שורה ,col מספר עמודה ,m מקבלת מטריצה CheckRow טענת כניסה: הפעולה */
    /* כל האיברים שווים לאותו ערך, או שקר אחרת col-(N-col-1) טענת יציאה: הפעולה מחזירה אמת אם בשורה זו בעמודות */
    static bool CheckRow(int[,] m, int col, int row, int value)
    {
        int j = col;

        while (j < (N - j - 1))
        {
            if (m[row, j] != value)
                return false;

            j++;
        }

        return true;
    }

    /* value וערך הנמצא במסגרת ,row מספר שורה ,col מספר עמודה ,m מקבלת מטריצה CheckRow טענת כניסה: הפעולה */
    /* טענת יציאה: הפעולה מחזירה אמת אם בעמודה זו החל מהשורה כל האיברים שווים לאותו ערך, או שקר אחרת */
    static bool CheckCol(int[,] m, int col, int row, int value)
    {
        int i = row;

        while (i < N - i - 1)
        {
            if (m[i, col] != value)
                return false;

            i++;
        }

        return true;
    }

    /* num ומספר מסגרת m מקבלת מטריצה CheckFrame טענת כניסה: הפעולה */
    /* טענת יציאה: הפעולה מחזירה אמת אם כל איברי המסגרת שווים, או שקר אחרת */
    static bool CheckFrame(int[,] m, int num)
    {
        int value;
        bool ok;

        value = m[num, num];                        // אתחול באחד מאיברי המסגרת

        ok = CheckRow(m, num, num, value);          // בדיקת השורה העליונה של המסגרת
        if (!ok) return false;

        ok = CheckRow(m, num, N - num - 1, value);  // בדיקת השורה התחתונה של המסגרת
        if (!ok) return false;

        ok = CheckCol(m, num, num, value);          // בדיקת העמודה השמאלית של המסגרת
        if (!ok) return false;

        ok = CheckCol(m, num, N - num - 1, value);  // בדיקת העמודה הימנית של המסגרת
        if (!ok) return false;

        return ok;
    }

    

    static void Main()
    {
        int[,] m = new int[N, N]
        {
            { 30, 30, 30, 30, 30 },
            { 30, 60, 60, 60, 30 },
            { 30, 60, 100, 60, 30 },
            { 30, 60, 60, 60, 30 },
            { 30, 30, 30, 30, 30 }
        };

        //int[,] m = new int[N, N]
        //{
        //    { 30, 30, 30, 35, 30 },
        //    { 30, 20, 20, 20, 30 },
        //    { 30, 20, 100, 20, 30 },
        //    { 30, 20, 20, 20, 30 },
        //    { 30, 30, 30, 30, 30 }
        //};


        //int[,] m = new int[N, N];

        //for (int i = 0; i < N; i++)
        //{
        //    for (int j = 0; j < N; j++)
        //    {
        //        Console.Write("Insert number in row " + i + " colum " + j);
        //        m[i, j] = int.Parse(Console.ReadLine());
        //    }
        //}

        bool valid = CheckProportion(m);        // בדיקת קיום היחס הנדרש בין המסגרת

        int k = 0;
        while (k < N / 2 && valid)
        {
            valid = CheckFrame(m, k);           // בדיקת שכל איברי כל מסגרת שווים זה בזה
            k++;
        }

        if (valid)
            Console.WriteLine("קליעה למטרה");
        else
            Console.WriteLine("לא קליעה למטרה");


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p59ex05

using System;

class Program
{
    const int N = 5;

    static bool EqualCross(int[,] m)
    {
        for (int i = 0; i < N; i++)
        {
            if (m[i, i] != m[i, N - i - 1])
                return false;
        }

        return true;
    }
    static bool EqualCross2(int[,] m)
    {
        int temp1 = 0, temp2 = 0;

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                if (i == j)
                    temp1 = m[i, j];

                if (i + j == N - 1)
                    temp2 = m[i, j];
            }

            if (temp1 != temp2)
                return false;
        }

        return true;
    }

    static void Main()
    {
        int[,] m =
        { 
            { 3, 0, 9, 1, 3 },
            { 8, 7, 1, 7, 3 },
            { 3, 0, 6, 1, 3 },
            { 3, 4, 9, 4, 3 },
            { 5, 0, 9, 1, 5 }
        };

        bool valid;

        valid = EqualCross(m);

        Console.WriteLine(valid);

        valid = EqualCross2(m);
        Console.WriteLine(valid);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p60tar01

using System;

class Program
{
    const int ROW = 5, COL = 4;

    // 1
    static int[,] GetByRows(int[,] m)
    {
        Console.Write("Fill the matrix array\n");
        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                m[i, j] = int.Parse(Console.ReadLine());
            }
        }
        ////m[ROW, COL] = 5;
        //int[,] table = { { 1, 2, 3, 4 }, { 1, 2, 3, 4 }, { 1, 2, 3, 4 }, { 1, 2, 3, 4 }, { 1, 2, 3, 4 } };
        //m = table;


        return m;
    }

    // 2
    static void PrintByColumn(int[,] m)
    {
        for (int i = 0; i < m.GetLength(1); i++)        // m.GetLength(1) = COL
        {
            for (int j = 0; j < m.GetLength(0); j++)    // m.GetLength(0) = ROW
            {
                Console.Write("{0,3} ", m[j, i]);
            }
            Console.WriteLine();
        }
    }
    static void PrintByRow(int[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)        // m.GetLength(1) = COL
        {
            for (int j = 0; j < m.GetLength(1); j++)    // m.GetLength(0) = ROW
            {
                Console.Write("{0,3} ", m[i, j]);
            }
            Console.WriteLine();
        }
    }

    // 3
    static void ResetArrayElementsToZero(int[,] m)
    {
        for (int i = 0; i < ROW; i++)
            for (int j = 0; j < COL; j++)
                m[i, j] = 0;
    }

    // 4
    static int[,] OrdinalNumbers(int[,] m)
    {
        int max = m[0, 0];
        int temp;

        for (int i = 0; i < ROW; i++)
        {
            for (int j = 0; j < COL; j++)
            {
                if (max > m[i, j])
                {
                    temp = m[i, j];
                    m[i, j] = temp;
                    max = temp;
                }
            }
        }

        return m;
    }

    // 4
    static int[,] OrdinalNumbers2(int[,] m)
    {
        int temp, k = 0, j;

        for (int i = 0; i < ROW * COL; i++)
        {
            for (j = 1; j < COL; j++)
            {
                if (m[k,j-1] > m[k, j])
                {
                    temp = m[k, j];
                    m[k, j] = m[k, j - 1];
                    m[k, j - 1] = temp;
                }

            }

            if ((i + 1) / COL == k + 1)
                k++;
        }

        return m;
    }

    static void Main()
    {
        int[,] m = new int[ROW, COL];

        int[,] table =
        {
            { 5, 1, 2, 4 },
            { 4, 6, 9, 1 },
            { 11, 21, 6, 9 },
            { 4, 7, 3, 2 },
            { 11, 83, 6, 9 }
        };

        table = OrdinalNumbers2(table); // 4

        // The table is printed by rows
        PrintByRow(table);

        Console.WriteLine();

        // The table is printed by columns
        PrintByColumn(table);

        Console.WriteLine("\n");
        m = GetByRows(m);

        //ResetArrayElementsToZero(m);

        PrintByColumn(m);

        m = OrdinalNumbers(m);
        PrintByColumn(m);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p60tar02

using System;

class Ch2Du1
{
    const int N = 4;
    static void Main()
    {
        char[,] m = new char[N, N];

        for (int i = 0; i < m.GetLength(0); i++)
            for (int j = 0; j < m.GetLength(1); j++)
                m[i, j] = '*';

        char let = 'a';

        for (int i = 0; i < m.GetLength(0); i++)
        {
            m[i, i] = let;
            m[i, m.GetLength(1) - i - 1] = let;
            let++;
        }

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
                Console.Write(m[i, j] + " ");
            Console.WriteLine();
        }


        Console.ReadKey();
    }
}

/*
using System;

class Ch2Du2
{
    const int N = 4;

    static void Init(int[,] m)
    {
        int num = 1;

        for (int i = 0; i < m.GetLength(0); i++)
        {
            if (i % 2 == 1)
            {
                for (int j = 0; j < m.GetLength(1); j++)
                {
                    m[i, j] = num;
                    num++;
                }
            }
            else
            {
                for (int j = m.GetLength(1) - 1; j >= 0; j--)
                {
                    m[i, j] = num;
                    num++;
                }
            }
        }
    }

    static void Main()
    {
        int[,] m = new int[N, N];

        Init(m);

        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
                Console.Write("{0,3}", m[i, j]);
            Console.WriteLine();
        }

        Console.ReadKey();
    }
}
*/

*******************************************************************************************************
// p61tar03a

using System;

class Program
{
    const int N = 3;

    public static void PrintByRow(int[,] m)
    {
        int sum = 0;

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                Console.Write("{0,4}", m[i, j]);
                sum += m[i, j];
            }
            Console.Write(" : sum = {0}\n\n", sum);
            sum = 0;
        }
    }

    static void Main()
    {
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };


        PrintByRow(m);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03b

using System;

class Program
{
    public static void PrintByCol(int[,] m)
    {
        int[] sum = new int[m.GetLength(0)];

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                Console.Write("{0,4}", m[i, j]);
                sum[i] += m[j, i];
            }

            Console.WriteLine("\n");
        }

        for (int i = 0; i < sum.Length; i++)
            Console.Write("{0,4}", sum[i]);
    }
    static void Main()
    {
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        PrintByCol(m);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03c

using System;

class Program
{
    static int PrintAround(int[,] m)
    {
        int sum = 0;

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                if (i == 0 || j == 0)
                {
                    sum += m[i, j];
                }
                else
                {
                    sum = sum + m[i, m.GetLength(0) - 1] + m[m.GetLength(1) - 1, j];

                    if (i == 4 && j == 4)
                        sum = sum - m[i, j];

                    i++;
                }
            }
        }

        return sum;
    }

    static void Main()
    {
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        int sum = PrintAround(m);

        Console.WriteLine("sum is = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03d

using System;

class Program
{
    static int SumDiagonal(int[,] m)
    {
        int sum = 0;

        for (int i = 0; i < m.GetLength(0); i++)
        {
            sum += m[i, i];
        }

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        sum = SumDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03e

using System;

class Program
{
    static int SumOfAboveMainDiagonal(int[,] m)
    {
        int sum = 0;

        for (int i = 0; i < m.GetLength(0) - 1; i++)
        {
            for (int j = 1 + i; j < m.GetLength(1); j++)
            {
                sum += m[i, j];
            }
        }

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        sum = SumOfAboveMainDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03f

using System;

class Program
{
    static int SumOfBelowOfMatrixDiagonal(int[,] m)
    {
        int sum = 0;

        for (int j = 0; j < m.GetLength(1) - 1; j++)
        {
            for (int i = 1 + j; i < m.GetLength(0); i++)
            {
                sum += m[i, j];
            }
        }
        //for (int i = 1; i < m.GetLength(1); i++)
        //{
        //    for (int j = 0; j < i; j++)
        //    {
        //        sum += m[i, j];
        //    }
        //}

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },      // | 0 | 0 | 0 | 0 | 0 |
            { 1, 1, 2, 3, 4 },      // | 1 | 0 | 0 | 0 | 0 |
            { 1, 8, 9, 4, 5 },      // | 1 | 8 | 0 | 0 | 0 |
            { 8, 7, 6, 5, 5 },      // | 8 | 7 | 6 | 0 | 0 |
            { 2, 7, 3, 6, 4 }       // | 2 | 7 | 3 | 6 | 0 |
        };

        sum = SumOfBelowOfMatrixDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03g

using System;

class Program
{
    static int SumOfSecondaryDiagonal(int[,] m)
    {
        int sum = 0;
        int x, y;

        for (int i = m.GetLength(0) - 1; i >= 0; i--)
        {
            x = m.GetLength(0) - i - 1;
            y = i;

            sum += m[m.GetLength(0) - i - 1, i];
        }

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        sum = SumOfSecondaryDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03h

using System;

class Program
{
    static int SumOfBelowOfSecondMatrixDiagonal(int[,] m)
    {
        int sum = 0;
        // | 0 | 0 | 0 | 0 | 0 |
        // | 0 | 0 | 0 | 0 | 4 |
        // | 0 | 0 | 0 | 4 | 5 |
        // | 0 | 0 | 6 | 5 | 5 |
        // | 0 | 7 | 3 | 6 | 4 |
        for (int i = m.GetLength(0) - 1; i > 0; i--)
        {
            for (int j = m.GetLength(1) - i; j < m.GetLength(1); j++)
            {
                sum += m[j, i];
            }
        }

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        sum = SumOfBelowOfSecondMatrixDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar03i

using System;

class Program
{
    static int SumOfAboveOfSecondMatrixDiagonal(int[,] m)
    {
        int sum = 0;
        // | 8 | 2 | 7 | 3 | 0 |
        // | 1 | 1 | 2 | 0 | 0 |
        // | 1 | 8 | 0 | 0 | 0 |
        // | 8 | 0 | 0 | 0 | 0 |
        // | 0 | 0 | 0 | 0 | 0 |
        for (int i = 0; i < m.GetLength(0) - 1; i++)
        {
            for (int j = 0; j < m.GetLength(1) - i - 1; j++)
            {
                sum += m[i, j];
            }
        }

        return sum;
    }

    static void Main()
    {
        int sum;
        int[,] m =
        {
            { 8, 2, 7, 3, 6 },
            { 1, 1, 2, 3, 4 },
            { 1, 8, 9, 4, 5 },
            { 8, 7, 6, 5, 5 },
            { 2, 7, 3, 6, 4 }
        };

        sum = SumOfAboveOfSecondMatrixDiagonal(m);
        Console.WriteLine("sum = {0}", sum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar04

using System;

class Program
{
    // קלט: מערך דו ממדי
    // פלט: המתודה מחזירה אמת אם כל איבריה באלכסון הראשי הם אחדות, אחרת שקר
    // Find if all elements of the main diagonal is equals to 1
    static bool IsMatrixDiagonalEqualOnesDigits(int[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)
            if (m[i, i] != 1)
                return false;

        return true;
    }

    // קלט: מערך דו ממדי
    // פטל: המתודה מחזירה אמת עם כל האיברים מעל האלכסון הראשי הם אפסים, אחרת שקר
    // Find if all elements above the main diagonal of matrix is equals to 0
    static bool IsAboveMatrixDiagonalEqualsZero(int[,] m)
    {
        for (int i = 0; i < m.GetLength(0) - 1; i++)
            for (int j = 1 + i; j < m.GetLength(1); j++)
                if (m[i, j] != 0)
                    return false;

        return true;
    }

    // קלט: מערך דו ממדי
    // פלט: המתודה מחזירה אמת אם כל האיברים מתחת לאלכסון הראשי הם אפסים, אחרת שקר
    // Find if all elements below the main diagonal of matrix is equals to 0
    static bool IsBelowMatrixDiagonalEqualsZero(int[,] m)
    {
        for (int j = 0; j < m.GetLength(1) - 1; j++)
            for (int i = 1 + j; i < m.GetLength(0); i++)
                if (m[i, j] != 0)
                    return false;

        return true;
    }


    static void Main()
    {
        bool diagonal, aboveDiagonal, belowDiagonal;

        //int[,] m =
        //{
        //    { 8, 2, 7, 3, 6 },
        //    { 1, 1, 2, 3, 4 },
        //    { 1, 8, 9, 4, 5 },
        //    { 8, 7, 6, 5, 5 },
        //    { 2, 7, 3, 6, 4 }
        //};

        int[,] m =
        {
            { 1, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 0, 0, 1 }
        };

        diagonal = IsMatrixDiagonalEqualOnesDigits(m);
        aboveDiagonal = IsAboveMatrixDiagonalEqualsZero(m);
        belowDiagonal = IsBelowMatrixDiagonalEqualsZero(m);

        if (diagonal && aboveDiagonal && belowDiagonal)
            Console.WriteLine("matrix homogen");
        else
            Console.WriteLine("matrix not homogen");
        

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p61tar05

using System;

class Program
{
    // קלט: הפעולה מקבלת מערך דו ממדי ומחשבת סכום האלכסון הראשי
    // פלט: הפעול מחזירה סוכם האלכסון הראשי
    static int SumOfMainDiagonalMatrix(int[,] m)
    {
        int sum = 0;

        for (int i = 0; i < m.GetLength(0); i++)
            sum += m[i, i];

        return sum;
    }

    // קלט: הפעולה מקבלת מערך דו ממדי ומחשבת סכום האלכסון המשני
    // פלט: הפעולה מחזירה סכום האלכסון המשני
    static int SumOfSecondaryDiagonalMatrix(int[,] m)
    {
        int sum = 0;

        for (int i = m.GetLength(0) - 1; i >= 0; i--)
            sum += m[m.GetLength(0) - i - 1, i];

        return sum;
    }

    // קלט: הפעולה מקבלת מערך דו ממדי
    // פלט: הפעולה מחזירה אמת אם סכום כל האיברים של כל שורה שווים זה לזה, או שקר אחר
    static bool IsEqualsRows(int[,] m)
    {
        int sum = 0;
        int[] row = new int[m.GetLength(1)];

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
                sum += m[i, j];

            row[i] = sum;
            sum = 0;
        }

        for (int i = 1; i < row.Length; i++)
            if (row[i - 1] != row[i])
                return false;

        return true;
    }

    // קלט: הפעולה מקבלת מערך דו ממדי
    // פלט: הפעולה מחזירה אמת אם סכום כל האיברים של כל העמודה שווים זה לזה, או שקר אחר
    static bool IsEqualsColumns(int[,] m)
    {
        int sum = 0;
        int[] col = new int[m.GetLength(0)];

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
                sum += m[j, i];

            col[i] = sum;
            sum = 0;
        }

        for (int i = 1; i < col.Length; i++)
            if (col[i - 1] != col[i])
                return false;

        return true;
    }


    static void Main()
    {
        int[,] m =
        {
            { 2, 9, 4 },
            { 7, 5, 3 },
            { 6, 1, 8 }
        };

        int d1, d2;
        bool rows, cols;

        d1 = SumOfMainDiagonalMatrix(m);
        d2 = SumOfSecondaryDiagonalMatrix(m);
        rows = IsEqualsRows(m);
        cols = IsEqualsColumns(m);

        if (d1 == d2 && rows && cols)
        {
            Console.WriteLine("Ribua Kesem");
        }
        else
        {
            Console.WriteLine("Rubua lo-Kesem");
        }


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p62tar06

using System;

class Program
{
    static bool IsMatrixRowSimetric(char[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)
            for (int j = 0; j < m.GetLength(1) / 2; j++)
                if (m[i, j] != m[i, m.GetLength(0) - 1 - j])
                    return false;

        return true;
    }

    static bool IsMatrixColumnSimetric(char[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)
            for (int j = 0; j < m.GetLength(1) / 2; j++)
                if (m[j, i] != m[m.GetLength(1) - j - 1, i])
                    return false;

        return true;
    }

    static bool IsMatrixSimetric(char[,] m)
    {
        bool rowsIsTrue, columnsIsTrue;

        rowsIsTrue = IsMatrixRowSimetric(m);
        columnsIsTrue = IsMatrixColumnSimetric(m);

        if (rowsIsTrue && columnsIsTrue)
            return true;
        else
            return false;
    }

    static void Main()
    {
        char[,] m =
        {
            { 'a', 'b', 'b', 'a' },
            { 'c', 'c', 'c', 'c' },
            { 'c', 'c', 'c', 'c' },
            { 'a', 'b', 'b', 'a' }
        };

        Console.WriteLine("The matrix is simetric?: {0}", IsMatrixSimetric(m));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p63tar08

using System;

class Program
{
    static void Main()
    {
        int f = -1;
        int s = 24;
        int n = 6;
        int[] a = new int[] { 2, 3, 5, 12, 8, 6 };
        int[,] c = new int[n, 2];

        for (int i = 0; i < n-2; i++)
        {
            for (int j = i + 1; j < n-1; j++)
            {
                if (a[i] * a[j] == s)
                {
                    f = f + 1;
                    c[f, 0] = a[i];
                    c[f, 1] = a[j];
                }
            }
        }
        if (f == -1)
            Console.WriteLine("empty");
        else
            for (int i = 0; i < f + 1; i++)
                Console.WriteLine("c[{0},0] = {1}, c[{2},1] = {3}", i, c[i, 0], i, c[i, 1]);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p63tar09

using System;

class Program
{
    const int N = 3;

    static bool Check1(int[,] m, int[] a)
    {
        int i = 0, j;

        //// שגיאה: לולאה אינסופית
        //while (i < m.GetLength(0))
        //{
        //    j = 0;
        //    while (a[j] == m[i, j] && j < m.GetLength(1) - 1)
        //    {
        //        j++;
        //    }

        //    if (j == m.GetLength(1))
        //        return true;
        //}

        while (i < m.GetLength(0))
        {
            j = 0;
            while (a[j] == m[i, j] && j < m.GetLength(1) - 1)
            {
                j++;
            }

            if ((j + 1) == m.GetLength(1))
                return true;

            i++;
        }

        return false;
    }

    static bool Check2(int[,] m, int[] a)
    {
        int i = 0, mone;

        while (i < m.GetLength(0))
        {
            mone = 0;

            for (int j = 0; j < m.GetLength(1); j++)
            {
                if (a[j] == m[i, j])
                    mone++;
            }

            if (mone == m.GetLength(1))
                return true;
            else
                i++;
        }

        return false;
    }


    static void Main()
    {
        int[,] m = new int[N, N] { { 5, 4, 6 }, { 7, 3, 9 }, { 11, 2, 3 } };
        int[] a = new int[N] { 7, 3, 9 };
        bool flag1, flag2;

       

        flag1 = Check1(m, a);
        flag2 = Check2(m, a);

        Console.WriteLine("flag1 = Check1(m, a)# " + flag1);
        Console.WriteLine("flag2 = Check1(m, a)# " + flag2);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p64tar10

using System;

class Program
{
    /* טענט כניסה: הפעלה מקבלת כפרטמטר מערך דו-ממדי */
    /* טענת יציאה: הפעולה מחזירה סכום כל האיברים שמעל לאלכסון הראשי */
    static int UpperSumOfMainDiagonal(int[,] m)
    {
        int sum = 0;

        for (int row = 0; row < m.GetLength(0); row++)
        {
            for (int col = row + 1; col < m.GetLength(1); col++)
            {
                sum += m[row, col];
            }
        }

        return sum;
    }

    /* טענט כניסה: הפעלה מקבלת כפרטמטר מערך דו-ממדי */
    /* טענת יציאה: הפעולה מחזירה סכום כל האיברים שמתחת לאלכסון הראשי */
    static int LowerSumOfMainDiagonal(int[,] m)
    {
        int sum = 0;

        for (int row = 1; row < m.GetLength(0); row++)
        {
            for (int col = 0; col < row; col++)
            {
                sum += m[row, col];
            }
        }

        return sum;
    }

    /* טענט כניסה: הפעלה מקבלת כפרטמטר מערך דו-ממדי */
    /* טענת יציאה: הפעולה מחליפה את האיברים שמעל לאלכסון הראשי באיברים שמתחת לאלכסון הראשי */
    static void ChangingElements(int[,] m)
    {
        int temp;

        for (int row = 0; row < m.GetLength(0); row++)
        {
            for (int col = row; col < m.GetLength(1); col++)    // העמודה תקבל ערך של שורה
            {
                temp = m[row, col];
                m[row, col] = m[col, row];
                m[col, row] = temp;
            }
        }
    }

    static void Print(int[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                Console.Write("{0,4}", m[i, j]);
            }
            Console.WriteLine();
        }
    }

    static void Main()
    {
        int upperSum, lowerSum;
        int[,] m =
        {
            { 1, 2, 3, 4 },         // 1   2  3  4
            { 5, 6, 7, 8 },         // 5   6  7  8
            { 9, 10, 11, 12 },      // 9  10 11 12
            { 13, 14, 15, 16 }      // 13 14 15 16
        };

        Console.WriteLine("Before changing");
        Print(m);

        // החלפת האיברים מעל לאלכסון הראשי
        ChangingElements(m);

        Console.WriteLine("\nAfter changing");
        Print(m);

        // סכום מעל לאלכסון הראשי
        upperSum = UpperSumOfMainDiagonal(m);

        // סכום מתחת לאלכסון הראשי
        lowerSum = LowerSumOfMainDiagonal(m);

        Console.WriteLine("sum of upper the main diagonal of matrix is: {0}", upperSum);

        Console.WriteLine("sum of lower the main diagonal of matrix is: {0}", lowerSum);

        Console.WriteLine("\n---------------------------------------------");
        Console.WriteLine("If sum of above more than below the main diagonal of matrix change the elements");

        Console.WriteLine("Before changing");
        Print(m);

        Console.WriteLine("Press any key...");

        Console.ReadKey();

        if (upperSum > lowerSum)
            ChangingElements(m);

        Console.WriteLine("\nAfter changing");
        Print(m);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p64tar11

using System;

class Lockers
{
    const int N = 9;

    static void CreateLockersNumber(int[,] locker)
    {
        int num = 10;

        for (int i = 0; i < locker.GetLength(0); i++)
        {
            num = 10 * (i + 1);

            for (int j = 0; j < locker.GetLength(1); j++)
            {
                num++;
                locker[i, j] = num;
            }
        }
    }

    static int GenerateCodes(int row, int col)
    {
        Random rnd = new Random();
        int num;

        num = rnd.Next(111, 999);

        return num + row * 10 + col;
    }

    static int GetCodesOfLocker(int[,] locker, int num)
    {
        int code, row, col;

        row = num / 10 - 1;
        col = num % 10 - 1;

        code = GenerateCodes(row, col);

        code += locker[row, col];

        return code;
    }

    static void Main()
    {
        int num, code;
        int[,] numOfLockers = new int[N, N];

        CreateLockersNumber(numOfLockers);

        Console.Write("Enter number between (11-99): ");
        num = int.Parse(Console.ReadLine());

        code = GetCodesOfLocker(numOfLockers, num);
        Console.WriteLine("The code of locker {0}, is {1}", num, code);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p65tar12

using System;

class Program
{
    const int N = 3;

    static void MultiplyMatrix(int[,] A, int[,] B, int[] arr)
    {
        for (int i = 0; i < A.GetLength(0); i++)
        {
            for (int j = 0; j < B.GetLength(1); j++)
            {
                arr[i] += A[i, j] * B[j, i];
            }
        }
    }

    static void PrintOneDimensionArray(int[] arr)
    {
        for (int i = 0; i < arr.GetLength(0); i++)
            Console.WriteLine("{0,4}", arr[i]);
        Console.WriteLine();
    }

    static void PrintTwoDimensionArray(int[,] m)
    {
        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                Console.Write("{0,4}", m[i, j]);
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }

    static void Main()
    {
        int[,] m1 = new int[N, N] { { 7, 5, 1 }, { 2, 3, 0 }, { 4, 2, 3 } };
        int[,] m2 = new int[N, N] { { 6, 2, 2 }, { 1, 8, 6 }, { 3, 0, 1 } };
        int[] arr = new int[N];

        Console.WriteLine("Print the arrays before multiply");
        PrintTwoDimensionArray(m1);
        PrintTwoDimensionArray(m2);
        PrintOneDimensionArray(arr);
        Console.WriteLine("---------------------------------------");

        MultiplyMatrix(m1, m2, arr);

        PrintOneDimensionArray(arr);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p65tar13

using System;

class Program
{
    // קלט: הפעולה מקבלת איבר ומטריצה 
    // פלט: הפעולה מחזירה מספר כמה פעמים הופיע האיבר במטריצה
    static int CalcCount(int[,] matrix, int v)
    {
        int count = 0;

        // עורים על כל האיברים במטריצה
        for (int i = 0; i < matrix.GetLength(0); i++)
            for (int j = 0; j < matrix.GetLength(1); j++)
                if (matrix[i, j] == v)      // האם האיבר הנתון שווה לאיבר במטריצה
                    count++;    // מגדילים את המונה

        return count;
    }

    static int SetElementsInArray(int[,] matrix, int[] res)
    {
        int index = 0;

        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                // מתקבל איבר ממטריצה
                int v = matrix[i, j];

                // ישנם במטריצה ,v-סופרים כמה איברים שהתקבלו ב
                int count = CalcCount(matrix, v);

                if (count == 1)
                {
                    res[index] = v;
                    index++;
                }
            }
        }

        return index;
    }

    static int[] ChangeArraySize(int[] arr, int size)
    {
        int[] res = new int[size];

        for (int i = 0; i < size; i++)
            res[i] = arr[i];

        return res;
    }

    static void Main()
    {
        int[,] matrix = new int[,]
                                {
                                    { 7, 5, 1 }, 
                                    { 2, 3, 7 }, 
                                    { 4, 2, 3 }
                                };

        // יצירת מעכך איברים שאינם חוזרים על עצמם
        int[] res = new int[9];

        int size;   // גודל מערך עם עבור האיברים העדכניים

        size = SetElementsInArray(matrix, res);

        res = ChangeArraySize(res, size);

        // הצגת נתונים
        Console.WriteLine(string.Join(", ", res));
        Console.ReadLine();
    }
}

*******************************************************************************************************
// p65tar14

using System;

class Program
{
    const int N = 5;    // מספר בני הנוער
    const int M = 30;    // מספר התקליטורים

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי ומעדכנת אותו */
    static void Answers(int[,] m)
    {
        Console.WriteLine("Enter 0 or 1 - for {0} children that have the records\n", N);
        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                Console.Write("records {0} for child {1}: ", j + 1, i + 1);
                m[i, j] = int.Parse(Console.ReadLine());
            }
            Console.WriteLine("-------------------------");
        }
    }


    /* טענת כניסה: הפעולה מקבלת מעכך דו ממדי */
    /* טענת יציאה: הפעולה מחזירה סכומי השורות כמערך חד ממדי */
    static int[] SumsOfRows(int[,] m)
    {
        int[] rowSum = new int[N];

        for (int i = 0; i < m.GetLength(0); i++)
        {
            for (int j = 0; j < m.GetLength(1); j++)
            {
                rowSum[i] += m[i, j];
            }
        }

        return rowSum;
    }


    /* טענת כניסה: הפעולה מקבלת מעכך דו ממדי */
    /* טענת יציא: הפעולה מחזירה סכומי העמודות כמערך חד ממדי */
    static int[] SumsOfColumn(int[,] m)
    {
        int[] columnSum = new int[M];

        for (int i = 0; i < m.GetLength(1); i++)
        {
            for (int j = 0; j < m.GetLength(0); j++)
            {
                columnSum[i] += m[j, i];
            }
        }

        return columnSum;
    }


    /* טענת הכניסה: הפעולה מקבלת מערך חד ממדי של סכומי העמודות ומדפיסה את כל הבני נוער שיש להם 30 תקליטורים */
    static void PrintMaxSums(int[] rows)
    {
        for (int i = 0; i < rows.Length; i++)
            if (rows[i] == M)
                Console.WriteLine("child {0} have {1} records", i + 1, M);

        Console.WriteLine("-------------------------\n");
    }


    /* טענת הכניסה: הפעולה מקבלת מערך דו ממדי ומדפיסה את הממוצע לכל נער */
    static void PrintAverage(int[] row)
    {
        for (int i = 0; i < row.Length; i++)
            Console.WriteLine("the average is: {0} for child {1}", (double)M / row[i], (i + 1));

        Console.WriteLine("-------------------------\n");
    }


    static void Main()
    {
        int[,] records = new int[N, M];
        int[] rowSum, columnSum;

        // קליטת התקליטורים
        Answers(records);

        // columnSum-ו rowSum חישוב סכומי השורות והעמודת והשמתם לתוך המעכים
        rowSum = SumsOfRows(records);
        columnSum = SumsOfColumn(records);

        //PrintMaxSums(columnSum);
        //PrintAverage(columnSum);

        PrintMaxSums(rowSum);
        PrintAverage(rowSum);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p65tar15

using System;

class Program
{
    const int S = 6;    // מחלקות
    const int T = 5;    // קופיות

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי עם סכומי הרכישות */
    /* טענת יציאה: הפעולה מחזירה מערך חד ממדי עם סה"כ של סכומים של המחלקות */
    static int[] SumsOfSections(int[,] purchasing)
    {
        int[] section = new int[S];      // מערך של פדיונות

        for (int i = 0; i < purchasing.GetLength(0); i++)
            for (int j = 0; j < purchasing.GetLength(1); j++)
                section[i] += purchasing[i, j];

        return section;
    }

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי ומעדכנת את הרכישות */
    /* המודות מייצגות את הקופיות והשורות את המחלקות */
    static void SetKolBo(int[,] purchasing)
    {
        int money, section, teller;


        Console.Write("Choose the section number between (1 - 6) for Kol-Bo: ");
        section = int.Parse(Console.ReadLine());

        Console.Write("Choose the teller number between (1 - 5) for Kol-Bo: ");
        teller = int.Parse(Console.ReadLine());

        Console.Write("Enter the purchase amount: ");
        money = int.Parse(Console.ReadLine());

        purchasing[section - 1, teller - 1] = money;

        while (money != -1)
        {
            while (money != -1)
            {
                Console.Write("Choose the section number (1 - 6) for Kol-Bo: ");
                section = int.Parse(Console.ReadLine());
                
                Console.Write("Choose the teller number (1 - 5) for Kol-Bo: ");
                teller = int.Parse(Console.ReadLine());

                Console.Write("Enter the purchase amount: ");
                money = int.Parse(Console.ReadLine());

                if (section == -1 || teller == -1 || money == -1)
                {
                    money = -1;
                    break;
                }

                purchasing[section - 1, teller - 1] += money;
            }
        }
    }

    /* טענת כניסה: הפעולה מקבלת מערך כפרמטר */
    /* טענת יציאה: הפעולה מחזירה את האיבר המינימלי במערך */
    static int FindMinInArray(int[] arr)
    {
        int min = 0;

        for (int i = 1; i < arr.Length; i++)
            min = (arr[i - 1] < arr[i] && arr[i - 1] != 0) ? arr[i - 1] : arr[i];

        return min;
    }

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי כפרמטר עם סכומי הרכישות */
    /* טענת יציאה: הפעולה מחזירה את הרכישה הגבוהה ביותר */
    static int FindMaxInMatrix(int[,] purchasing)
    {
        int max = 0;

        for (int i = 0; i < purchasing.GetLength(0); i++)
            for (int j = 0; j < purchasing.GetLength(1); j++)
                if (purchasing[i, j] > max)
                    max = purchasing[i, j];

        return max;
    }

    /* טענת כניסה: הפעולה מקבלת פרמטר אחד כמערך דו ממדי של סה"כ הרחישות וכפרמטר השני את הרכישה הגבוהה ביותר */
    /* הפעולה מדפיסה: אצל איזו קופאים מאיזו מחלקה הייתה הרכישה הגבוהה ביותר */
    static void PrintSectionAndSellerOfMaxPurchase(int[,] purchase, int maxPurchase)
    {
        for (int i = 0; i < purchase.GetLength(0); i++)
            for (int j = 0; j < purchase.GetLength(1); j++)
                if (maxPurchase == purchase[i, j])
                    Console.WriteLine("section: {0,4}, \tteller: {1,4}, \tthe sum: {2,4}", i, j, maxPurchase);
    }

    static void PrintMinSumOfSection(int[] sections, int minSum)
    {
        for (int i = 0; i < sections.Length; i++)
            if (sections[i] == minSum)
                Console.WriteLine("The minimu sale in the section is: {0}", i);
    }

    static void PrintAllSale(int[,] purchase)
    {
        int sum = 0;

        for (int i = 0; i < purchase.GetLength(0); i++)
            for (int j = 0; j < purchase.GetLength(1); j++)
                sum += purchase[i, j];

        Console.WriteLine("The all sale of Kol-Bo is: {0}", sum);
    }

    static void Main()
    {
        int[,] purchasing = new int[S, T];   // מערך דו ממדי של מחלקות וקופיות
        int[] sections = new int[S];  // מערך חד ממדי לעדכון מחלקה של סה"כ הרכישות
        int minSale;    // הפדיון הנמוך ביותר
        int maxPurchase;    // הרכישה הגבוהה ביותר


        SetKolBo(purchasing);   // עדכון הרכישות

        sections = SumsOfSections(purchasing);   // מערך של מחלקות עם סה"כ סכומים

        minSale = FindMinInArray(sections);      // הפדיון הנמחוך ביותר

        maxPurchase = FindMaxInMatrix(purchasing);  // הרכישה הגבוהה ביותר

        Console.WriteLine("----Printing answer----");
        PrintSectionAndSellerOfMaxPurchase(purchasing, maxPurchase);
        PrintMinSumOfSection(sections, minSale);
        PrintAllSale(purchasing);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p66tar16

using System;

class Program
{
    const int R = 7;    // מציין על מספר השורות של טבלת הלוטו
    const int C = 7;    // מציין על מספר העמודות של טבלת הלוטו

    const int CHANCE_COLUMN = 6;
    const int CHANCE_ROWS = 5;

    /* טענת כניסה: הפעולה בונה טבלת הלוטו של המספרים בין 1 ל-49 */
    static void CreateGameTable(int[,] table)
    {
        int elements = 1;

        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                table[i, j] = elements;
                elements++;
            }
        }
    }

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי כפרמטר ומעדכנת אותו מספרים שהוגרלו */
    /* טענת יציאה: הפעולה מחזירה חמש ניחושים האחרונים שהוגרלו כמערך דו ממדי */
    static int[,] SetFiveLastNumbers(int[,] lotoNumbers)
    {
        for (int i = 0; i < lotoNumbers.GetLength(0); i++)
        {
            Console.WriteLine("Enter numbers of {0} of loto chances", i + 1);
            for (int j = 0; j < lotoNumbers.GetLength(1); j++)
            {
                lotoNumbers[i, j] = int.Parse(Console.ReadLine());
            }
        }

        return lotoNumbers;
    }

    /* טענת כניסה: הפעולה מקבלת מערך דו ממדי של הניחושים האחרונים ומספר */
    /* טענת היציאה: הפעולה בודקת אם המספר נמצאה באחת האגרלות האחרונות, אם המספר נמצאה תחזיר אמת, אחרת שקר */
    static bool IsFind(int[,] lastChances, ref int num)
    {
        for (int i = 0; i < lastChances.GetLength(0); i++)
        {
            for (int j = 0; j < lastChances.GetLength(1); j++)
            {
                if (lastChances[i, j] == num)
                {
                    //num = lastChances[i, j];
                    return true;
                }
            }
        }

        return false;
    }

    /* טענת כניסה: הפעולה מקבלת שני מערכים דו ממדיים - מעכך ראשון כטבלת המספרים האפשריים והשני של הניחושים האחרונים */
    /* טענת יציאה: הפעולה יוצרת מערך חדש של 6 מספרים הראשונים שלא הוגרלו עד כה */
    static int[] CreatingNewNumbers(int[,] table, int[,] lastChances)
    {
        int[] rowNew = new int[CHANCE_COLUMN];
        int count = 0;

        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                if (!IsFind(lastChances, ref table[i, j]))
                {
                    rowNew[count] = table[i, j];
                    count++;
                }
                if (count == 6)
                    return rowNew;
            }
        }

        return rowNew;
    }

    static void Main()
    {
        int[,] table = new int[R, C];   // מייצג את האיברים של משחק-מזל
        CreateGameTable(table);

        // תוצאות אחרונות של הלוטו שיצאו
        int[,] lastChances = new int[CHANCE_ROWS, CHANCE_COLUMN];
        lastChances = SetFiveLastNumbers(lastChances);

        // מערך חד ממדי של מספרים שלא הוגרלו מהתוצאות האחרונות שיצאו בלוטו
        int[] arr = new int[CHANCE_COLUMN];
        arr = CreatingNewNumbers(table, lastChances);

        Console.WriteLine();
        Console.WriteLine("The chances of numbers is:");
        for (int i = 0; i < arr.Length; i++)
        {
            Console.Write(" {0,4}", arr[i]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p66tar17

using System;

class Program
{
    static int[] FindMaxStudentsInSectionAndGroup(int[,] zofim)
    {
        int[] max = new int[zofim.GetLength(0)];
        int tempMax = 0;

        for (int i = 0; i < zofim.GetLength(0); i++)
        {
            tempMax = zofim[i, 0];
            for (int j = 1; j < zofim.GetLength(1); j++)
            {
                if (tempMax < zofim[i, j])
                    tempMax = zofim[i, j];
            }
            max[i] = tempMax;
        }

        return max;
    }

    static void PrintSectionAndGroupOfMaxStudents(int[,] zofim)
    {
        int[] max = FindMaxStudentsInSectionAndGroup(zofim);

        for (int i = 0; i < zofim.GetLength(0); i++)
        {
            for (int j = 0; j < zofim.GetLength(1); j++)
            {
                if (max[i] == zofim[i, j])
                {
                    Console.WriteLine("gdud: {0}, kvuza: {1}, hanihim: {2}", i + 1, j + 1, max[i]);
                }
            }
        }
    }

    static int FindMinFromAllMaxies(int[] max)
    {
        int min = 0;

        min = max[0];
        for (int i = 1; i < max.Length; i++)
        {
            if (max[i] < min)
                min = max[i];
        }

        return min;
    }

    static void PrintMinFromAllMaxies(int[,] zofim, int min)
    {
        Console.WriteLine("The minimal group from all maxies groups is:");
        for (int i = 0; i < zofim.GetLength(0); i++)
        {
            for (int j = 0; j < zofim.GetLength(1); j++)
            {
                if (zofim[i, j] == min)
                {
                    Console.WriteLine("gdud {0}, kvuzta {1}:", i + 1, j + 1);
                }
            }
        }
        Console.WriteLine("end the number is: {0}", min);
    }

    static void Main()
    {
        int[,] zofim =
        { 
            { 9, 15, 23, 18, 15, 20 },
            { 21, 20, 19, 17, 34, 22 },
            { 30, 28, 25, 19, 20, 19 },
            { 14, 16, 23, 22, 21, 23 }
        };

        int[] max = new int[zofim.GetLength(0)];

        max = FindMaxStudentsInSectionAndGroup(zofim);

        int min;
        min = FindMinFromAllMaxies(max);


        Console.WriteLine("--------------------------------");
        PrintSectionAndGroupOfMaxStudents(zofim);
        Console.WriteLine("--------------------------------");
        PrintMinFromAllMaxies(zofim, min);
        Console.WriteLine("--------------------------------");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p66tar18

using System;

class Program
{
    static int FindMaxSequence(char[,] tav, int row)
    {
        int[] sequences = new int[tav.GetLength(1)];
        int index = 0;
        int maxSequence = 1;

        for (int i = 1; i < tav.GetLength(1); i++)
        {
            if (tav[row - 1, i - 1] == tav[row - 1, i])
            {
                maxSequence++;
                sequences[index] = maxSequence;
            }
            else
            {
                if (sequences[index] != 0)
                {
                    index++;
                    maxSequence = 1;
                }
            }
        }

        maxSequence = sequences[0];
        for (int i = 0; i < sequences.Length; i++)
        {
            if (sequences[i] > maxSequence)
                maxSequence = sequences[i];
        }

        return maxSequence;
    }

    static void GetTable(char[,] tav)
    {
        int[] allMaxSequences = new int[tav.GetLength(0)];
        int row, maxSequence;

        for (int i = 0; i < tav.GetLength(0); i++)
        {
            for (int j = 0; j < tav.GetLength(1); j++)
            {
                Console.Write("{0,4}", tav[i, j]);
            }
            Console.WriteLine();
        }

        Console.Write("Enter number of row for find max sequence: ");
        row = int.Parse(Console.ReadLine());

        maxSequence = FindMaxSequence(tav, row);

        Print(row, maxSequence);
    }

    static void InsertAllRows(char[,] tav)
    {
        int[] maxSequences = new int[tav.GetLength(0)];

        Console.WriteLine("The method finding for all rows the max sequences.");

        for (int i = 0; i < maxSequences.Length; i++)
        {
            maxSequences[i] = FindMaxSequence(tav, i + 1);

            Print(i + 1, maxSequences[i]);
        }

    }

    static void Print(int row, int maxSequence)
    {
        Console.WriteLine("The max sequence of row {0} is: {1}", row, maxSequence);
    }



    static void Main()
    {
        char[,] tav = new char[4, 7]
        {
            { 'c', 'a', 'a', 'x', '@', '@', '@' },
            { 'x', 'y', 'z', 'f', 'f', 'd', 'x' },
            { 'e', 'h', 'k', 'k', 'k', 'k', 'a' },
            { 'i', 'i', 'i', 'i', 'i', '@', '@' }
        };

        GetTable(tav);
        Console.WriteLine();
        InsertAllRows(tav);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p66tar19

using System;

class Program
{
    static int[,] CornerOfSquare(int[,] mat)
    {
        int[,] tempTable = new int[mat.GetLength(0), mat.GetLength(1)];

        int bottom = mat.GetLength(0) - 1;
        int right = mat.GetLength(1) - 1;

        if ((mat[0, 0] > mat[0, 1]) &&
            (mat[0, 0] > mat[1, 1]) &&
            (mat[0, 0] > mat[1, 0]))
            tempTable[0, 0] = mat[0, 0];

        if ((mat[0, right] > mat[0, 1]) &&
            (mat[0, right] > mat[1, 1]) &&
            (mat[0, 0] > mat[1, 0]))
            tempTable[0, 0] = mat[0, 0];

        if ((mat[0, 0] > mat[0, 1]) &&
            (mat[0, 0] > mat[1, 1]) &&
            (mat[0, 0] > mat[1, 0]))
            tempTable[0, 0] = mat[0, 0];

        if ((mat[0, 0] > mat[0, 1]) &&
            (mat[0, 0] > mat[1, 1]) &&
            (mat[0, 0] > mat[1, 0]))
            tempTable[0, 0] = mat[0, 0];

        return tempTable;
    }

    static void PerimeterOfSquare(int[,] mat)
    {
        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = 0; j < mat.GetLength(1); j++)
            {
                if ((i == 0 && j == 0) || (i == 0 && j == mat.GetLength(1) - 1) ||
                    (i == mat.GetLength(0) - 1 && j == 0) || (i == mat.GetLength(0) - 1 && j == mat.GetLength(1) - 1))
                {
                    CornerOfSquare(mat);
                }
                else
                {

                }
            }
        }
    }

    static void FindSmallestNeighbors(int[,] mat)
    {
        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = 0; j < mat.GetLength(1); j++)
            {
                // רץ על ההיקף של הריבוע
                if (i == 0 || i == mat.GetLength(0) - 1 || j == 0 || j == mat.GetLength(1) - 1)
                {
                    PerimeterOfSquare(mat);
                }
                else
                {

                }
            }
        }
    }


    private static bool IsLocalMax(int[,] a, int i, int j)
    {
        bool rightBound = i == a.GetLength(0) - 1;
        bool botBound = j == a.GetLength(1) - 1;

        int val = a[i, j];

        bool horisIsOk = (i == 0 || a[i - 1, j] < val) && (rightBound || a[i + 1, j] < val);

        bool vertIsOk = (j == 0 || a[i, j - 1] < val) && (botBound || a[i, j + 1] < val);

        bool leftDiagIsOk = (i == 0 || (j == 0 || a[i - 1, j - 1] < val) && (botBound || a[i - 1, j + 1] < val));

        bool rightDiagIsOk = (rightBound || (j == 0 || a[i + 1, j - 1] < val) && (botBound || a[i + 1, j + 1] < val));


        return horisIsOk && vertIsOk && leftDiagIsOk && rightDiagIsOk;
    }


    static void Main()
    {
        int[,] mat =
        {
            { 480, 345, 230, 320, 200 },
            { 420, 300, 200, 400, 200 },
            { 333, 444, 500, 410, 250 },
            { 366, 488, 313, 276, 499 },
            { 400, 200, 200, 300, 430 }
        };

        //FindSmallestNeighbors(mat);

        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = 0; j < mat.GetLength(1); j++)
            {
                if (IsLocalMax(mat, i, j))
                    Console.WriteLine("[{0}, {1}] = {2}", i, j, mat[i, j]);
            }
        }


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p70SelectionSort

using System;

class Program
{
    static void SelectionSrot(int[] a)
    {
        int temp, pmin;

        for (int i = 0; i < a.Length - 1; i++)
        {
            pmin = i;
            for (int j = i + 1; j < a.Length; j++)
            {
                if (a[j] < a[pmin]) // מציאת את האינדקס של האיבר הקטן ביותר במערך
                    pmin = j;   // שמירת האינדקס במשתנה הזמני של האיבר הקטן ביותר
            }

            temp = a[i];
            a[i] = a[pmin];
            a[pmin] = temp;
        }
    }

    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void Main()
    {
        int[] a = new int[5] { 23, 15, 6, 7, 30 };

        Console.WriteLine("Before sorting");
        Print(a);

        SelectionSrot(a);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p72BubbleSort

// BubbleSort1
using System;

class Program
{
    static void BubbleSort(int[] a)
    {
        int temp;

        for (int i = 0; i < a.Length - 1; i++)
        {
            for (int j = 0; j < a.Length - i - 1; j++)
            {
                if (a[j] > a[j + 1])
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }

    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void Main()
    {
        int[] a = new int[5] { 23, 15, 6, 7, 30 };

        Console.WriteLine("Before sorting");
        Print(a);

        BubbleSort(a);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

// BubbleSort2
using System;

class Program
{
    static void BubbleSort(int[] a)
    {
        int temp;
        bool sorted = false;

        for (int i = 0; i < a.Length - 1 && !sorted; i++)
        {
            sorted = true;
            for (int j = 0; j < a.Length - i - 1; j++)
            {
                if (a[j] > a[j + 1])
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;

                    sorted = false;
                }
            }
        }
    }

    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void Main()
    {
        int[] a = new int[5] { 23, 15, 6, 7, 30 };

        Console.WriteLine("Before sorting");
        Print(a);

        BubbleSort(a);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p76InsertionSort

using System;

class Program
{
    public static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static void AddToSortArray(int[] a, int n, int num)
    {
        int i;

        //for (i = 0; i < n && a[i] < num; i++) ;

        i = 0;
        while (i < n && a[i] < num)
        {
            i++;
        }

        for (int j = n; j > i; j--)
            a[j] = a[j - 1];

        a[i] = num;
    }

    static int[] InsertionSort(int size)
    {
        int[] a = new int[size];
        int num;

        for (int i = 0; i < size; i++)
        {
            Console.Write("Enter value ");
            num = int.Parse(Console.ReadLine());
            AddToSortArray(a, i, num);
        }

        return a;
    }



    static void Main()
    {
        int size;
        int[] arr;

        Console.Write("Enter a size for array ");
        size = int.Parse(Console.ReadLine());

        arr = InsertionSort(size);

        Console.WriteLine("After Sort:");
        Print(arr);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar01

using System;

class Program
{
    static void SelectionSortByDescending(int[] a)
    {
        int tempIndex;
        int tempElem;

        for (int i = 0; i < a.Length-1; i++)
        {
            tempIndex = i;

            for (int j = i + 1; j < a.Length; j++)
            {
                if (a[i] < a[j])
                    tempIndex = j;
            }

            tempElem = a[i];
            a[i] = a[tempIndex];
            a[tempIndex] = tempElem;
            
        }
    }

    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void Main()
    {
        int[] a = new int[5] { 23, 15, 6, 7, 30 };

        Console.WriteLine("Before sorting");
        Print(a);

        SelectionSortByDescending(a);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar02

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void BubbleSortByDescending(int[] a)
    {
        int temp;

        for (int i = a.Length - 1; i >= 0; i--)
        {
            for (int j = a.Length - 2; j >= 0; j--)
            {
                if (a[j + 1] > a[j])
                {
                    temp = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = temp;
                }
            }
        }
    }

    static void Main()
    {
        int[] a = new int[] { 23, 1, 3, 33, 15, 6, 7, 30 };

        Console.WriteLine("Before sorting");
        Print(a);

        BubbleSortByDescending(a);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar03

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void AddToSortArray(int[] a, int n, int num)
    {
        int i = 0;

        while (i < n && a[i] > num)
        {
            i++;
        }


        int j = n;
        while (j > i)
        {
            a[j] = a[j - 1];
            j--;
        }

        a[i] = num;
    }

    static int[] InsertionSortByDescending(int size)
    {
        int num;
        int[] arr = new int[size];

        for (int i = 0; i < size; i++)
        {
            Console.Write("Enter value ");
            num = int.Parse(Console.ReadLine());
            AddToSortArray(arr, i, num);
        }

        return arr;
    }

    static void Main()
    {
        int size;
        int[] a;

        Console.Write("Enter a size for array ");
        size = int.Parse(Console.ReadLine());

        a = InsertionSortByDescending(size);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar04

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("{0,4}", a[i]);
        }
    }

    static void AddToSortArray(int[] a, int n, int num)
    {
        int i = 0;

        while (i < n && a[i] > num)
        {
            i++;
        }


        int j = n;
        while (j > i)
        {
            a[j] = a[j - 1];
            j--;
        }

        a[i] = num;
    }
    static int[] InsertionSortByDescending(int size)
    {
        int num;
        int[] arr = new int[size];

        for (int i = 0; i < size; i++)
        {
            Console.Write("Enter value ");
            num = int.Parse(Console.ReadLine());
            AddToSortArray(arr, i, num);
        }

        return arr;
    }

    static void SelectionSortByIndex(int[] a, int start, int last)
    {
        //int len = (int)Math.Abs(start - last);
        int tempIndex;
        int key;

        for (int i = start; i >= start && i < last; i++)
        {
            tempIndex = i;
            for (int j = i + 1; j >= start + 1 && j <= last; j++)
            {
                if (a[j] < a[tempIndex])
                    tempIndex = j;
            }

            key = a[i];
            a[i] = a[tempIndex];
            a[tempIndex] = key;
        }
    }

    static void Main()
    {
        int[] a = { 2, 8, 20, 4, 7, 15, 18, 1, 11 };
        int start, last;

        Console.WriteLine("\nBefore sorting");
        Print(a);

        Console.WriteLine("\n\nArray will be sort from start up to ending index that putted\n");

        Console.Write("Enter a number for start index an array: ");
        start = int.Parse(Console.ReadLine());

        Console.Write("Enter a number for last index an array: ");
        last = int.Parse(Console.ReadLine());

        SelectionSortByIndex(a, start, last);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar05

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static void AddToSortArray(int[] a, int n, int num)
    {
        int i = 0;

        while (i < n && a[i] > num)
        {
            i++;
        }

        int j = n;
        while (j > i)
        {
            a[j] = a[j - 1];
            j--;
        }

        a[i] = num;
    }
    static int[] InsertionSortByDescending(int size)
    {
        int num;
        int[] arr = new int[size];

        for (int i = 0; i < size; i++)
        {
            Console.Write("Enter value ");
            num = int.Parse(Console.ReadLine());
            AddToSortArray(arr, i, num);
        }

        return arr;
    }

    static void SelectionSortByIndex(int[] a, int start, int last)
    {
        //int len = (int)Math.Abs(start - last);
        int tempIndex;
        int key;

        for (int k = start; k < 2; k++)
        {
            for (int i = start; i >= start && i < last; i++)
            {
                tempIndex = i;
                for (int j = i + 1; j >= start + 1 && j <= last; j++)
                {
                    if (a[j] < a[tempIndex])
                        tempIndex = j;
                }

                key = a[i];
                a[i] = a[tempIndex];
                a[tempIndex] = key;
            }

            start = last + 1;
            last = a.Length - 1;
        }

        //for (int i = start; i >= start && i < last; i++)
        //{
        //    tempIndex = i;
        //    for (int j = i + 1; j >= start + 1 && j <= last; j++)
        //    {
        //        if (a[j] < a[tempIndex])
        //            tempIndex = j;
        //    }

        //    key = a[i];
        //    a[i] = a[tempIndex];
        //    a[tempIndex] = key;
        //}
    }

    static void Main()
    {
        int[] a = { 2, 8, 20, 4, 7, 15, 18, 1 };
        int start, last;

        Console.WriteLine("\nBefore sorting");
        Print(a);

        Console.WriteLine("\nThe lenght of array is: {0}", a.Length);
        Console.WriteLine("The array started from index: {0}", a.Length - a.Length);
        Console.WriteLine("The array ended on index: {0}", a.Length - 1);

        Console.WriteLine("\nArray will be sort from start up to ending index that putted\n");

        Console.Write("Enter a number {0} for first-half of starting index an array: ", a.Length - a.Length);
        start = int.Parse(Console.ReadLine());

        Console.Write("Enter a number {0} for first-half of last index an array: ", a.Length / 2 - 1);
        last = int.Parse(Console.ReadLine());

        SelectionSortByIndex(a, start, last);

        Console.WriteLine("\n\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar06

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static void AddToSortArray(int[] a, int n, int num)
    {
        int i = 0;

        while (i < n && a[i] > num)
        {
            i++;
        }


        int j = n;
        while (j > i)
        {
            a[j] = a[j - 1];
            j--;
        }

        a[i] = num;
    }
    static int[] InsertionSortByDescending(int size)
    {
        int num;
        int[] arr = new int[size];

        for (int i = 0; i < size; i++)
        {
            Console.Write("Enter value ");
            num = int.Parse(Console.ReadLine());
            AddToSortArray(arr, i, num);
        }

        return arr;
    }

    static void SelectionSortByIndex(int[] a, int start, int last)
    {
        int tempIndex;
        int key;

        for (int i = start; i >= start && i < last; i++)
        {
            tempIndex = i;
            for (int j = i + 1; j >= start + 1 && j <= last; j++)
            {
                if (a[j] < a[tempIndex])
                    tempIndex = j;
            }

            key = a[i];
            a[i] = a[tempIndex];
            a[tempIndex] = key;
        }
    }

    static void SelectionSortByParts(int[] a, int n)
    {
        int interval;
        int start, last;

        if (a.Length % n == 0)
            interval = a.Length / n;
        else
            interval = a.Length / n + 1;

        start = 0;
        last = n - 1;
        for (int i = start; i < interval; i++)
        {
            if (last - a.Length > 0)
                last = a.Length - 1;

            SelectionSortByIndex(a, start, last);

            start = (i + 1) * n;
            last = start + n - 1;
        }
    }

    static void Main()
    {
        //int[] a = { 2, 8, 20, 4, 7, 15, 18, 1 };
        int[] a = { 9, 18, 22, 3, 17, 5, 28, 11, 2, 8, 20, 4, 7, 15, 18, 1 };
        int n;

        Console.WriteLine("\nBefore sorting");
        Print(a);

        Console.WriteLine("\nThe lenght of array is: {0}", a.Length);
        Console.WriteLine("The array started from index: {0}", a.Length - a.Length);
        Console.WriteLine("The array ended on index: {0}", a.Length - 1);

        Console.WriteLine("\nArray will be sort from start up to ending index that putted\n");

        Console.WriteLine("Enter a number");
        n = int.Parse(Console.ReadLine());
        SelectionSortByParts(a, n);

        Console.WriteLine("\nAfter sorting");
        Print(a);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar07

using System;

class Program
{
    static void Print()
    {

    }

    static int[] GenerateWorkersId(int[] workerId)
    {
        Random rnd = new Random();

        for (int i = 0; i < workerId.Length; i++)
        {
            workerId[i] = rnd.Next(1000, 5000);
        }

        return workerId;
    }

    static int[] GenerateExpirience(int[] seniority)
    {
        Random rnd = new Random();

        for (int i = 0; i < seniority.Length; i++)
        {
            seniority[i] = rnd.Next(1, 30);
        }

        return seniority;
    }

    static void SelectionSort(int[] seniority, int len)
    {
        int[] workerId = new int[len];
        int tempIndex, tempElem;

        workerId = GenerateWorkersId(workerId);

        for (int i = 0; i < len - 1; i++)
        {
            tempIndex = i;
            for (int j = i+1; j < len; j++)
            {
                if (seniority[j] < seniority[tempIndex])
                {
                    tempIndex = j;
                }
            }

            // מסדר את המערך לפי ותק
            tempElem = seniority[i];
            seniority[i] = seniority[tempIndex];
            seniority[tempIndex] = tempElem;

            // מסדר את המערך של מספרי העובדים בהתאם לסידור הותק
            tempElem = workerId[i];
            workerId[i] = workerId[tempIndex];
            workerId[tempIndex] = tempElem;
        }
    }

    static void Print(int[] workerId, int[] seniority)
    {
        int i = 0, j = workerId.Length - 10;

        while (i < 5 || j != workerId.Length)
        {
            if (i < 5)
            {
                Console.WriteLine("WorkerId = {0}, \tSeniority = {1}", workerId[i], seniority[i]);
                i++;
            }
            else
            {
                Console.WriteLine("WorkerId = {0}, \tSeniority = {1}", workerId[j], seniority[j]);
                j++;
            }
        }
    }

    static void Main()
    {
        int[] workerId = new int[20];
        int[] seniority = new int[20];
        int len;

        len = workerId.Length;
        workerId = GenerateWorkersId(workerId);
        seniority = GenerateExpirience(seniority);

        SelectionSort(seniority, len);

        Print(workerId, seniority);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p78tar08

using System;

class Program
{
    const int N = 3, M = 4;


    static void BubbleSortByDescending(int[,] mat)
    {
        int temp;

        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = mat.GetLength(1) - 1; j >= 0; j--)
            {
                for (int k = mat.GetLength(1) - 2; k >= 0; k--)
                {
                    if (mat[i, k + 1] > mat[i, k])
                    {
                        temp = mat[i, k];
                        mat[i, k] = mat[i, k + 1];
                        mat[i, k + 1] = temp;
                    }
                }
            }
        }
    }

    static void Print(int[,] mat)
    {
        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = 0; j < mat.GetLength(1); j++)
            {
                Console.Write("{0,4}", mat[i, j]);
            }
            Console.WriteLine();
        }
    }

    static void Main()
    {
        int[,] mat = new int[N, M];
        Random rnd = new Random();

        for (int i = 0; i < mat.GetLength(0); i++)
        {
            for (int j = 0; j < mat.GetLength(1); j++)
            {
                mat[i, j] = rnd.Next(20);
            }
        }

        Console.WriteLine("Before bubble sorting");
        Print(mat);

        BubbleSortByDescending(mat);

        Console.WriteLine("\nAfter bubble sorting");
        Print(mat);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p79SearchInNotSortedArray

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
    }

    static int LinearSearch(int[] a, int value)
    {
        for (int i = 0; i < a.Length; i++)
            if (a[i] == value)
                return i;

        return -1;
    }

    static void Main()
    {
        int[] a = new int[] { 23, 1, 3, 33, 15, 6, 7, 30 };
        int value;

        Console.WriteLine("Enter a value");
        value = int.Parse(Console.ReadLine());

        Console.WriteLine("intdex of value: {0} is: {1}", value, LinearSearch(a, value));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p80SearchingInSortedArray

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
        Console.WriteLine();
    }

    static int LinearSearch(int[] a, int value)
    {
        for (int i = 0; i < a.Length; i++)
        {
            if (a[i] == value)
                return i;
            else
                if (a[i] > value)
                    return -1;
        }

        return -1;
    }

    static void BubbleSortByAscending(int[] a)
    {
        int temp;

        for (int i = 0; i < a.Length - 1; i++)
        {
            for (int j = 1; j < a.Length; j++)
            {
                if (a[j - 1] > a[j])
                {
                    temp = a[j];
                    a[j] = a[j - 1];
                    a[j - 1] = temp;
                }
            }
        }
    }

    static void Main()
    {
        int[] a = new int[] { 23, 1, 3, 33, 15, 6, 7, 30 };
        int value;

        Print(a);
        BubbleSortByAscending(a);
        Print(a);

        Console.WriteLine("Enter a value");
        value = int.Parse(Console.ReadLine());

        Console.WriteLine("intdex of value: {0} is: {1}", value, LinearSearch(a, value));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p82BinarySearch

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
        Console.WriteLine();
    }

    static void BubbleSortByAscending(int[] a)
    {
        int temp;

        for (int i = 0; i < a.Length - 1; i++)
        {
            for (int j = 1; j < a.Length; j++)
            {
                if (a[j - 1] > a[j])
                {
                    temp = a[j];
                    a[j] = a[j - 1];
                    a[j - 1] = temp;
                }
            }
        }
    }

    static int LinearSearch(int[] a, int value)
    {
        for (int i = 0; i < a.Length; i++)
        {
            if (a[i] == value)
                return i;
            else
                if (a[i] > value)
                    return -1;
        }

        return -1;
    }

    static int BinarySearch(int[] a, int num)
    {
        int low = 0, hight = a.Length - 1, middle;

        while (low <= hight)
        {
            middle = (low + hight) / 2;

            if (num == a[middle])
            {
                return middle;
            }
            else
            {
                if (num < a[middle])
                    hight = middle - 1;
                else
                    low = middle + 1;
            }
        }

        return -1;
    }

    static void Main()
    {
        int[] a = { 1, 3, 6, 12, 15, 23, 30, 60, 70, 75, 80, 90, 92, 95, 98 };
        int value;

        Print(a);

        Console.WriteLine("Enter a value");
        value = int.Parse(Console.ReadLine());

        Console.WriteLine("intdex of value: {0} is: {1}", value, BinarySearch(a, value));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p83tar10

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int BinarySearch(int[] a, int value)
    {
        int low = 0, hight = a.Length - 1, middle;

        while (low <= hight)
        {
            middle = (low + hight) / 2;
            if (value == a[middle])
                return middle;
            else
                if (value > a[middle])
                    hight = middle - 1;
                else
                    low = middle + 1;
        }

        return -1;
    }

    static void Main()
    {
        int[] a = { 98, 95, 92, 90, 80, 75, 70, 60, 30, 23, 15, 12, 6, 3, 1 };
        int value;

        Print(a);

        Console.WriteLine("Enter a value");
        value = int.Parse(Console.ReadLine());

        Console.WriteLine("intdex of value: {0} is: {1}", value, BinarySearch(a, value));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p83tar11

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int BinarySearchForDescendingArray(int[] a, int value, int start, int last)
    {
        int middle, low, hight;

        low = start;
        hight = last;

        while (low <= hight)
        {
            middle = (low + hight) / 2;

            if (value == a[middle])
                return middle;
            else
            {
                if (value > a[middle])
                    hight = middle - 1;
                else
                    low = middle + 1;
                
            }
        }


        return -1;
    }

    static int BinarySearchForAscendingArray(int[] a, int value, int start, int last)
    {
        int middle;

        while (start <= last)
        {
            middle = (start + last) / 2;

            if (value == a[middle])
                return middle;
            else
            {
                if (value < a[middle])
                    last = middle - 1;
                else
                    start = middle + 1;
            }
        }

        return -1;
    }

    static void SelectionSort(int[] a)
    {
        int temp, pmin;

        for (int i = 0; i < a.Length - 1; i++)
        {
            pmin = i;

            for (int j = i + 1; j < a.Length; j++)
            {
                if (a[j] < a[pmin])
                {
                    pmin = j;
                }
            }

            temp = a[i];
            a[i] = a[pmin];
            a[pmin] = temp;
        }
    }

    static void Main()
    {
        // א. עבור מערך ממוין
        int[] a1 = { 98, 95, 92, 90, 80, 75, 70, 60, 30, 23, 15, 12, 6, 3, 1 };
        int value, start, last;
        int answer;

        Print(a1);

        Console.Write("Enter a value for find it: ");
        value = int.Parse(Console.ReadLine());

        Console.Write("Enter a value for from: ");
        start = int.Parse(Console.ReadLine());

        Console.Write("Enter a value for up to: ");
        last = int.Parse(Console.ReadLine());

        Console.WriteLine("finding the index ...");

        answer = BinarySearchForDescendingArray(a1, value, start, last);

        Console.WriteLine("The index of falue {0} is: {1}", value, answer);
        Console.WriteLine("\n");

        // ב. עבור מערך לא ממוין
        int[] a2 = { 3, 92, 80, 75, 70, 60, 30, 23, 90, 15, 12, 95, 6, 98, 1 };

        Console.WriteLine("The array a2 before sorting is: ");
        Print(a2);

        // а2 נמיין את המערך
        SelectionSort(a2);
        Console.WriteLine("The array a2 before sorting is: ");
        Print(a2);

        Console.Write("Enter a value for find it: ");
        value = int.Parse(Console.ReadLine());

        Console.Write("Enter a value for from: ");
        start = int.Parse(Console.ReadLine());

        Console.Write("Enter a value for up to: ");
        last = int.Parse(Console.ReadLine());

        Console.WriteLine("finding the index ...");

        answer = BinarySearchForAscendingArray(a2, value, start, last);

        Console.WriteLine("The index of falue {0} is: {1}", value, answer);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p83tar12

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static bool IsSortedArray(int[] a)
    {
        return IsEqualsForSortedArray(a);
    }
    static bool IsEqualsForSortedArray(int[] a)
    {
        if (a.Length % 2 == 0)
        {
            for (int i = 0; i < a.Length / 2; i++)
            {
                if (a[i] != a[a.Length / 2 + i])
                {
                    return false;
                }
            }
        }
        else
        {
            for (int i = 0; i < a.Length / 2; i++)
            {
                if (a[i] != a[a.Length / 2 + i + 1])
                {
                    return false;
                }
            }
        }

        return true;
    }


    static bool IsNotSortedArray(int[] a)
    {
        return IsEqualsForNotSortedArray(a);
    }
    static bool IsEqualsForNotSortedArray(int[] a)
    {
        // finding by elements..
        int count = 0;

        if (a.Length % 2 == 0)
        {
            for (int i = 0; i < a.Length / 2; i++)
            {
                for (int j = 0; j < a.Length / 2; j++)
                {
                    if (a[i] == a[j])
                        count++;
                }
            }

            if (count == a.Length / 2)
                return true;
        }
        else
        {
            for (int i = 0; i < a.Length / 2; i++)
            {
                for (int j = a.Length / 2 + 1; j < a.Length; j++)
                {
                    if (a[i] == a[j])
                        count++;
                }
            }

            if (count == a.Length / 2)
                return true;
        }

        return false;
    }

    static void Main()
    {
        bool answer;

        int[] a1 = { 98, 80, 75, 70, 12, 6, 3, 1 };     // a1 - sorted array
        answer = IsSortedArray(a1);
        Console.WriteLine("a1: {0}", answer);

        int[] a2 = { 3, 92, 80, 75, 70, 60, 30 };       // a2 - not sorted array
        answer = IsNotSortedArray(a2);
        Console.WriteLine("a2: {0}", answer);

        int[] b1 = { 1, 2, 3, 5, 1, 2, 3 };
        answer = IsNotSortedArray(b1);
        Console.WriteLine("b1: {0}", answer);

        int[] b2 = { 1, 2, 3, 1, 2, 3 };
        answer = IsNotSortedArray(b2);
        Console.WriteLine("b2: {0}", answer);
        
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p83tar13

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int TernarySearch(int[] a, int value)
    {
        int first = 0, second = a.Length - 1, middleBetween;

        middleBetween = (first + second) / 3;
        while (first <= second)
        {
            if (value == a[middleBetween])
            {
                return middleBetween;
            }
            else
            {
                if (value < a[middleBetween])
                {
                    second = middleBetween - 1;
                }
                else
                {
                    first = middleBetween + 1;
                    second = middleBetween * 2 + 1;
                    //if (value > a[middleBetween] && value< a[middleBetween * 2])
                    //{
                    //    second = middleBetween + 1;
                    //    middleBetween = middleBetween * 2;
                    //}
                    //else
                    //{
                    //}
                }
            }

            middleBetween = (first + second) / 2;
        }

        return -1;
    }

    static void Main()
    {
        //int[] a = { 11, 22, 35, 44, 51, 56, 71, 80, 83, 87, 90, 92 };
        int[] a = { 4, 5, 7, 13, 20, 34, 37, 40, 45, 48, 55, 61, 70, 73, 85, 86, 88, 92, 93, 98, 105, 130, 135, 143 };
        int value, answer;

        value = int.Parse(Console.ReadLine());
        answer = TernarySearch(a, value);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p84Merge

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int[] MergeArray(int[] a1, int[] a2)
    {
        int p1 = 0, p2 = 0, p3 = 0;
        int[] a3 = new int[a1.Length + a2.Length];

        while (p1 < a1.Length && p2 < a2.Length)
        {
            if (a1[p1] < a2[p2])
            {
                a3[p3] = a1[p1];
                p1++;
            }
            else
            {
                a3[p3] = a2[p2];
                p2++;
            }
            p3++;
        }

        while (p1 < a1.Length)
        {
            a3[p3] = a1[p1];
            p1++;
            p3++;
        }

        while (p2 < a2.Length)
        {
            a3[p3] = a2[p2];
            p2++;
            p3++;
        }

        return a3;
    }

    static void Main()
    {
        int[] a1 = { 10, 17, 90 };
        int[] a2 = { 1, 3, 12, 100, 110 };
        int[] arr = new int[a1.Length + a2.Length];

        arr = MergeArray(a1, a2);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p86tar14

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int[] MergeArray(int[] a1, int[] a2)
    {
        int p1 = 0, p2 = 0, p3 = 0;
        int[] a3 = new int[a1.Length + a2.Length];

        while (p1 < a1.Length && p2 < a2.Length)
        {
            if (a1[p1] < a2[p2])
            {
                a3[p3] = a1[p1];
                p1++;
            }
            else
            {
                if (a1[p1] == a2[p2])
                    p2++;
                else
                {
                    a3[p3] = a2[p2];
                    p2++;
                }
            }
            p3++;
        }

        while (p1 < a1.Length)
        {
            a3[p3] = a1[p1];
            p1++;
            p3++;
        }

        while (p2 < a2.Length)
        {
            a3[p3] = a2[p2];
            p2++;
            p3++;
        }

        for (int i = 0; i < a3.Length - 1; i++)
        {
            if (a3[i] == 0)
            {
                a3[i] = a3[i + 1];
                a3[i + 1] = 0;
            }
        }

        return a3;
    }

    static void Main()
    {
        int[] a1 = { 10, 17, 90 };
        int[] a2 = { 1, 10, 12, 100, 110 };
        int[] arr = new int[a1.Length + a2.Length];

        arr = MergeArray(a1, a2);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p86tar15

using System;

class Program
{
    static void Print(int[] a)
    {
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);

        Console.WriteLine();
    }

    static int[] MergeArray(int[] a1, int[] a2)
    {
        int p1 = 0, p2 = a2.Length - 1, p3 = 0;
        int[] a3 = new int[a1.Length + a2.Length];

        while (p1 < a1.Length && p2 >= 0)
        {
            if (a1[p1] < a2[p2])
            {
                a3[p3] = a1[p1];
                p1++;
            }
            else
            {
                a3[p3] = a2[p2];
                p2--;
            }

            p3++;
        }

        while (p1 < a1.Length)
        {
            a3[p3] = a1[p1];
            p1++;
            p3++;
        }

        while (p2 >= 0)
        {
            a3[p3] = a2[p2];
            p2--;
            p3++;
        }

        return a3;
    }

    static void Main()
    {
        int[] a1 = { 10, 17, 90 };
        int[] a2 = { 110, 100, 15, 5, 1 };
        int[] arr = new int[a1.Length + a2.Length];

        arr = MergeArray(a1, a2);

        Print(arr);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p86tar16

using System;

// .פתח ויישם אלגוריתם המקבל כקלט שני מערכים ממוינים בסדר עולה ובהם יש איברים חוזרים
// .האלגוריתם מחזיר מערך ממוזג כך שכל איבר במערך המיזוג יופיע פעם אחת בלבד
class Program
{
    const int A = 3, B = 5, C = A + B;

    // printing the array
    static void Print(int[] arr)
    {
        for (int i = 0; i < arr.Length; i++)
            Console.Write("{0,4}", arr[i]);

        Console.WriteLine();
    }

    // Sorting an elements by insertion sort
    static void InsertionSortAsc(int[] a)
    {
        int num;

        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("Enter a value: ");
            a[i] = int.Parse(Console.ReadLine());

            num = a[i];

            int j = 0;
            for (j = 0; j < i && a[j] < num; j++) ;

            for (int k = i; k > j; k--)
            {
                a[k] = a[k - 1];
            }

            a[j] = num;
        }

    }

    static int[] Merge(int[] a, int[] b)
    {
        int indx1 = 0, indx2 = 0, indx3 = 0;
        int[] c = new int[a.Length + b.Length];

        while (indx1 < a.Length && indx2 < b.Length)
        {
            if (a[indx1] < b[indx2])
            {
                c[indx3] = a[indx1];
                indx1++;
            }
            else
            {
                c[indx3] = b[indx2];
                indx2++;

                while (a[indx1] == b[indx2])
                    indx1++;

                while (b[indx2] == b[indx2 - 1])
                    indx2++;
            }
            indx3++;
        }

        while (indx1 < a.Length)
        {
            c[indx3] = a[indx1];
            indx1++;
            indx3++;
        }

        while (indx2 < b.Length)
        {
            c[indx3] = b[indx2];
            indx2++;
            indx3++;
        }

        return c;
    }

    static void Main()
    {
        int[] a = { 2, 5, 5, 17 };
        int[] b = { 1, 3, 4, 4, 5, 5, 10, 20 };
        int[] c;

        c = Merge(a, b);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p86tar17

using System;

// .פתח ויישם אלגוריתם המקבל כקלט שני מערכים ממוינים בסדר עולה ובהם יש איברים חוזרים
// .האלגוריתם מחזיר מערך ממוזג כך שכל איבר במערך המיזוג יופיע פעם אחת בלבד
class Program
{
    const int A = 3, B = 5, C = A + B;

    // printing the array
    static void Print(int[] arr)
    {
        for (int i = 0; i < arr.Length; i++)
            Console.Write("{0,4}", arr[i]);

        Console.WriteLine();
    }

    // Sorting an elements by insertion sort
    static void InsertionSortAsc(int[] a)
    {
        int num;

        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("Enter a value: ");
            a[i] = int.Parse(Console.ReadLine());

            num = a[i];

            int j = 0;
            for (j = 0; j < i && a[j] < num; j++) ;

            for (int k = i; k > j; k--)
            {
                a[k] = a[k - 1];
            }

            a[j] = num;
        }

    }

    static int[] Merge(int[] a, int[] b, int[] c)
    {
        int aind = 0, bind = 0, cind = 0, dind = 0;
        int[] d = new int[a.Length + b.Length + c.Length];

        // c-ו b ,a כאן מתבצע חיפוש והשמה של האיברים על החיתוך בין שלושת המערכים
		while (aind < a.Length && bind < b.Length && dind < c.Length)
        {
            if (a[aind] < b[bind] && a[aind] < c[dind] ||
                a[aind] < b[bind] && b[aind] < c[dind])
            {
                d[dind] = a[aind];
                aind++;
            }
            else
            {
                if (b[bind] < c[cind])
                {
                    d[dind] = b[bind];
                    bind++;
                }
                else
                {
                    d[dind] = c[cind];
                    cind++;
                }

                while (a[aind] == b[bind] || a[aind] == c[cind])
                    aind++;

                while (b[bind] == c[cind])
                    bind++;

                if (bind != 0)
                    while (b[bind] == b[bind - 1])
                        bind++;
                if (cind != 0)
                    while (c[cind] == c[cind - 1])
                        cind++;
            }
            dind++;
        }

        // b-ו a כאן מתבצע חיפוש והשמה של האיברים של החיתוך בין שני המערכים
        while (aind < a.Length && bind < b.Length)
        {
            if (a[aind] < b[bind])
            {
                d[dind] = a[aind];
                aind++;
            }
            else
            {
                d[dind] = b[bind];
                bind++;
                while (a[aind] == b[bind]) aind++;
                while (b[bind] == b[bind - 1]) bind++;
            }
            dind++;
        }
        // c-ו a כאן מתבצע חיפוש והשמה של האיברים של החיתוך בין שני המערכים
        while (aind < a.Length && cind < c.Length)
        {
            if (a[aind] < c[cind])
            {
                d[dind] = a[aind];
                aind++;
            }
            else
            {
                d[dind] = c[cind];
                cind++;
                while (a[aind] == c[cind]) aind++;
                while (c[cind] == b[cind - 1]) cind++;
            }
            dind++;
        }
        // c-ו b כאן מתבצע חיפוש והשמה של האיברים של החיתוך בין שני המערכים
        while (bind < b.Length && cind < c.Length)
        {
            if (b[bind] < c[cind])
            {
                d[dind] = b[bind];
                bind++;
            }
            else
            {
                d[dind] = c[cind];
                cind++;
                while (b[bind] == c[cind]) bind++;
                while (c[cind] == b[cind - 1]) cind++;
            }
            dind++;
        }

        // a כאן מתבצע חיפוש והשמה של האיברים שנשארו במערך
        while (aind < a.Length)
        {
            d[dind] = a[aind];
            aind++;
            dind++;
        }
        // b כאן מתבצע חיפוש והשמה של האיברים שנשארו במערך
        while (bind < b.Length)
        {
            d[dind] = b[bind];
            bind++;
            dind++;
        }
        // c כאן מתבצע חיפוש והשמה של האיברים שנשארו במערך
        while (cind < c.Length)
        {
            d[dind] = c[cind];
            cind++;
            dind++;
        }

        return d;
    }

    static void Main()
    {
        int[] a = { 3, 5, 15 };
        int[] b = { 2, 5, 5, 17 };
        int[] c = { 1, 3, 4, 4, 5, 5, 10, 20 };
        int[] d;

        d = Merge(a, b, c);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p86tar18

using System;

// .פתח ויישם אלגוריתם המקבל כקלט שני מערכים ממוינים בסדר עולה ובהם יש איברים חוזרים
// .האלגוריתם מחזיר מערך ממוזג כך שכל איבר במערך המיזוג יופיע פעם אחת בלבד
class Program
{
    const int A = 3, B = 5, C = A + B;

    // printing the array
    static void Print(int[] arr)
    {
        for (int i = 0; i < arr.Length; i++)
            Console.Write("{0,4}", arr[i]);

        Console.WriteLine();
    }

    // Sorting an elements by insertion sort
    static void InsertionSortAsc(int[] a)
    {
        int num;

        for (int i = 0; i < a.Length; i++)
        {
            Console.Write("Enter a value: ");
            a[i] = int.Parse(Console.ReadLine());

            num = a[i];

            int j = 0;
            for (j = 0; j < i && a[j] < num; j++) ;

            for (int k = i; k > j; k--)
            {
                a[k] = a[k - 1];
            }

            a[j] = num;
        }

    }

    static int[] IntersectionMerge(int[] a, int[] b)
    {
        int[] arr = new int[Math.Min(a.Length, b.Length)];
        int i = 0, j = 0, k = 1;

        while (k - 1 < Math.Min(a.Length, b.Length))
        {
            if (b[j] == a[i])
            {
                arr[k - 1] = a[i];
                k++; i++; j++;
            }
            else
            {
                if (a.Length < b.Length)
                {
                    if (j != Math.Max(a.Length, b.Length) - 1)
                        j++;
                    else
                        break;
                }
                else
                {
                    if (i != Math.Max(a.Length, b.Length) - 1)
                        i++;
                    else
                        break;
                }
            }
        }

        return arr;
    }

    static void Main()
    {
        int[] a = { 3, 5, 15 };
        int[] b = { 2, 5, 5, 17 };
        int[] c = { 1, 3, 4, 4, 5, 5, 10, 20 };
        //int[] d = { 1, 3, 4, 4, 5, 5, 10, 20, 143, 234, 265, 432 };
        int[] arr;

        arr = IntersectionMerge(c, a);

        Print(arr);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p90ex01 using System;

// א. קלט והחזרה של מערך
// ב. הדפסת מערך
// ג. חישוב והחזרה של סכום אברי מערך
// ד. חישוב והחזרה של ממוצע אברי מערך
// ה. חישוב ומחזרה של הערך המקסימלי במערך
// ו. מיון מערך

/* מחלקת שירות עבור מערך של שלמים */
class MyIntArr
{
    /* טענת יציאה: הפעולה קולטת גודל למערך, בונה אותו, קולטת לתוכו ערכים ומחזירה אותו */
    public static int[] Read()
    {
        int n;
        int[] a;

        Console.Write("Enter array size: ");
        n = int.Parse(Console.ReadLine());

        a = new int[n];

        Console.WriteLine("Enter array values");
        for (int i = 0; i < n; i++)
            a[i] = int.Parse(Console.ReadLine());

        return a;
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* טענת יציאה: הפעולה מדפיסה את ערכי המערך בשורה אחת */
    public static void Write(int[] a)
    {
        Console.WriteLine("The array values are:");
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
        Console.WriteLine();
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* טענת יציאה: הפעולה מחשבת ומחזירה את סכום אברי המערך */
    public static int Sum(int[] a)
    {
        int sum = 0;
        for (int i = 0; i < a.Length; i++)
            sum += a[i];

        return sum;
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* טענת היציאה: הפעולה מחשבת ומחזירה את ממוצע אברי המערך */
    public static double Average(int[] a)
    {
        double avg = 0.0;

        avg = (double)Sum(a) / a.Length;

        return avg;
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* טענת יציאה: הפעולה מחשבת ומחזירה את הערך המקסימלי בין אברי המערך */
    public static int Max(int[] a)
    {
        int max = a[0];

        for (int i = 1; i < a.Length; i++)
            if (max < a[i]) max = a[i];

        return max;
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* הפעולה ממיינת את המערך */
    public static void Sort(int[] a)
    {
        int temp, p;

        for (int i = 0; i < a.Length - 1; i++)
        {
            p = i;
            for (int j = i + 1; j < a.Length; j++)
                if (a[j] < a[p])
                    p = j;
            
            if (p != i)
            {
                temp = a[i];
                a[i] = a[p];
                a[p] = temp;
            }
        }
    }
}

// א. קלט והחזרה של מערך
// ב. הדפסת מערך
// ג. חישוב והחזרה של סכום אברי מערך
// ד. חישוב והחזרה של ממוצע אברי מערך
// ה. חישוב ומחזרה של הערך המקסימלי במערך
// ו. מיון מערך
class Ch4Solve1TestMyIntArr
{
    static void Main()
    {
        int[] a = MyIntArr.Read();

        MyIntArr.Write(a);
        Console.WriteLine("The array sum is: " + MyIntArr.Sum(a));
        Console.WriteLine("The array average is: " + MyIntArr.Average(a));
        Console.WriteLine("The maximum value in array is: " + MyIntArr.Max(a));

        MyIntArr.Sort(a);
        Console.WriteLine("The sorted array is: ");
        MyIntArr.Write(a);

        Console.WriteLine("Hello");
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p92tar01

using System;

/* מחלקת שירות עבור סדרה חשבונית */
class ArithmeticProgression
{
    public static int[] ElementsOfProgression(int a1, int d, int n)
    {
        int[] a = new int[n];

        for (int i = 0; i < n; i++)
            a[i] = a1 + ((i + 1) - 1) * d;

        return a;
    }

    /* a טענת כניסה: הפעולה מקבלת מערך */
    /* טענת יציאה: הפעולה מדפיסה את ערכי המערך בשורה אחת */
    public static void Write(int[] a)
    {
        Console.WriteLine("The array values are:");
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
        Console.WriteLine();
    }

    /* n ואת מספר השלם d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* האיברים הראשונים של הסדרה החשבונית n טענת יציאה: הפעולה מדפיסה את */
    public static void PrintAmountElements(int a1, int d, int n)
    {
        int[] a = new int[n];
        a = ElementsOfProgression(a1, d, n);
        //for (int i = 0; i < n; i++)
        //    a[i] = a1 + ((i + 1) - 1) * d;

        Write(a);
    }

    /* n ואת מספר השלם d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* י של הסדרה-n-טענת יציאה: הפעולה מחזירה את האיבר ה */
    public static int NumberOf_an(int a1, int d, int n)
    {
        int an;
        an = a1 + (n - 1) * d;

        return an;
    }

    /* n ואת מספר השלם d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* האיברים הראשונים של הסדרה החשבונית n טענת יציאה: הפעולה מדפיסה את */
    public static int SumOfProgression(int a1, int d, int n)
    {
        int sum = 0;
        int[] a = ElementsOfProgression(a1, d, n);

        for (int i = 0; i < n; i++)
            sum += a[i];

        return sum;
    }

    /* n ואת מספר השלם d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* האיברים הראשונים של הסדרה החשבונית n טענת יציאה: הפעולה מדפיסה את */
    public static void NumbersIsBetween(int a1, int d, int n1, int n2)
    {
        int len = 0, temp, n = 0;

        temp = n1;
        while (temp <= n2)    // n2-ל n1 מציאת אורך של מספר האיברים בין
        {
            len++;
            temp += d;
        }

        temp = n1;
        while (temp != a1)  // n1 מציאת אינדקס של המספר
        {
            n++;
            temp -= d;
        }


        int[] a = new int[len];
        for (int i = 0; i < a.Length; i++)
        {
            a[i] = NumberOf_an(a1, d, n + 1);
            n++;
            //n1 += d;
        }

        Write(a);
    }

    /* num ואת מספר d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* טענת יציאה: הפעולה מחזירה את מספר הסדורי של האיבר */
    public static int IndexOfNuber(int a1, int d, int num)
    {
        int n = 1;
        while (num != a1)  // n1 מציאת אינדקס של המספר
        {
            n++;
            num -= d;
        }
        return n;
    }

    /* num ואת מספר d את הפרש הסדרה ,a1 טענת כניסה: הפעולה מקבלת את האיבר הראשון של הסדרה */
    /* האיברים הראשונים של הסדרה החשבונית n טענת יציאה: הפעולה מדפיסה את */
    public static bool IsFind(int a1, int d, int num)
    {
        while (a1 < num)
        {
            num -= d;
            if (num == a1)
                return true;
        }

        return false;
    }
}

// א. קלט והחזרה של מערך
// ב. הדפסת מערך
// ג. חישוב והחזרה של סכום אברי מערך
// ד. חישוב והחזרה של ממוצע אברי מערך
// ה. חישוב ומחזרה של הערך המקסימלי במערך
// ו. מיון מערך
class Program
{
    static void Main()
    {
        int a1, d, n;
        int[] a;
        int num, sum, n1, n2;

        Console.Write("Enter a first number: a1 = ");
        a1 = int.Parse(Console.ReadLine());
        Console.Write("Enter a difference: d = ");
        d = int.Parse(Console.ReadLine());
        Console.Write("Enter an amount: n = ");
        n = int.Parse(Console.ReadLine());

        // 1
        //ArithmeticProgression.PrintAmountElements(a1, d, n);

        // 2
        //num = ArithmeticProgression.NumberOf_an(a1, d, n);
        //Console.WriteLine("The num is: a[" + n + "] = " + num );

        // 3
        //sum = ArithmeticProgression.SumOfProgression(a1, d, n);
        //Console.WriteLine("The sum of arithmetic progression is: " + sum);

        // 4
        //Console.Write("Enter n1: ");
        //n1 = int.Parse(Console.ReadLine());
        //Console.Write("Enter n2: ");
        //n2 = int.Parse(Console.ReadLine());
        //Console.WriteLine("Numbers of between n1-n2 is:");
        //ArithmeticProgression.NumbersIsBetween(a1, d, n1, n2);

        // 5
        //Console.Write("Enter a number of arithmetic progression: ");
        //num = int.Parse(Console.ReadLine());
        //Console.WriteLine("The index number of: " + num + " is: " + ArithmeticProgression.IndexOfNuber(a1, d, num));

        // 6
        Console.WriteLine("num " + n + " is: " + ArithmeticProgression.IsFind(a1, d, n));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p92tar02

using System;

class SetTheory
{
    // 1.   A ∩ B
    public static int[] Intersection(int[] A, int[] B)
    {
        int lenIntersection, count = 0;

        lenIntersection = (A.Length < B.Length) ? A.Length : B.Length;

        int[] C = new int[lenIntersection];

        for (int i = 0; i < A.Length; i++)
            for (int j = 0; j < B.Length; j++)
                if (A[i] == B[j])
                    C[count++] = B[j];

        return C;
    }

    // 2.   A ∪ B
    public static int[] Union(int[] A, int[] B)
    {
        int count = 0;
        bool isFind = true;

        int[] C = new int[A.Length + B.Length];

        for (int i = 0; i < A.Length; i++)
            C[count++] = A[i];

        for (int i = 0; i < B.Length; i++)
        {
            isFind = true;
            for (int j = 0; j < A.Length; j++)
                if (B[i] == A[j])
                    isFind = false;

            if (isFind)
                C[count++] = B[i];
        }

        return C;
    }

    // 3.   A ∖ B
    public static int[] Complement(int[] A, int[] B)
    {
        int[] C = new int[A.Length];
        //int[] union = new int[A.Length + B.Length];
        int count = 0;
        bool isFind;

        //union = Union(A, B);

        for (int i = 0; i < C.Length; i++)
        {
            isFind = false;
            for (int j = 0; j < B.Length; j++)
                if (A[i] == B[j])
                    isFind = true;

            if (!isFind)
                C[count++] = A[i];
        }
        return C;
    }

    // 4.   A ⊇ B
    public static bool SubSet(int[] A, int[] B)
    {
        int count = 0;

        for (int i = 0; i < B.Length; i++)
            for (int j = 0; j < A.Length; j++)
                if (B[i] == A[j])
                    count++;

        if (count == B.Length)
            return true;

        return false;
    }

    // 6.   merge
    public static int[] Merge(int[] A, int[] B)
    {
        int pmin = 0, temp;
        int[] C = new int[A.Length + B.Length];

        C = Union(A, B);

        for (int i = 0; i < C.Length - 1; i++)
        {
            pmin = i;
            for (int j = i + 1; j < C.Length; j++)
            {
                if (C[j] < C[pmin] && C[j] != 0)
                    pmin = j;
            }

            temp = C[i];
            C[i] = C[pmin];
            C[pmin] = temp;
        }

        return C;
    }

    public static void Write(int[] a)
    {
        Console.Write("The array value is: ");
        for (int i = 0; i < a.Length; i++)
            Console.Write("{0,4}", a[i]);
        Console.WriteLine();
    }
}

class Program
{
    static void Main()
    {
        //int[] A = { 5, 7, 8, 12 };
        int[] A = { 5, 7, 8, 12, 2, 3, 9, 11, 15, 20 };
        int[] B = { 2, 3, 5, 7, 9, 11, 12, 15 };
        int[] C;
        bool isSet;

        Console.Write("A: ");
        SetTheory.Write(A);
        Console.Write("B: ");
        SetTheory.Write(B);
        Console.WriteLine("---------------------------------------------------------\n");

        // 1
        C = SetTheory.Intersection(A, B);
        Console.WriteLine("Intersection(A, B):");
        SetTheory.Write(C);

        // 2
        C = SetTheory.Union(A, B);
        Console.WriteLine("\nUnion(A, B):");
        SetTheory.Write(C);

        // 3
        C = SetTheory.Complement(A, B);
        Console.WriteLine("\nComplement(A, B):");
        SetTheory.Write(C);

        // 4
        isSet = SetTheory.SubSet(A, B);
        Console.WriteLine("\nSubSet(A, B):");
        Console.WriteLine("B subset A is: " + isSet);

        // 5
        C = SetTheory.Merge(A, B);
        Console.WriteLine("\nMerge(A, B):");
        SetTheory.Write(C);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p93tar03

using System;

class Heap
{
    // 1:   0-פעולה מקבלת ערימת קלפים ומאתחלת כל קלף בערימת הקלפים ב
    public static void ResetDeckCards(int[] deck)
    {
        for (int i = 0; i < deck.Length; i++)
            deck[i] = 0;
    }

    // 2:   ערכים שונים של קלפים לתחילת הערימה n וקולטת n הפעולה מקבלת ערימת קלפים ומספר שלם
    public static void GiveDeck(int[] deck, int n)
    {
        Console.Write("Entered {0} cards", n);
        GenerateRandomNumbersForDeck(deck, n);
    }

    // 3:   קלפים שונים לערימה בתחום 1-13 שיהיו בתחילת הערימה n ומגרילה ,n הפעולה מקבלת ערימת קלפים ומספר שלם
    public static void GenerateRandomNumbersForDeck(int[] deck, int n)
    {
        Random rnd = new Random();

        for (int i = 0; i < n; i++)
        {
            for (int j = i; j > 0; j--)
                deck[j] = deck[j - 1];

            deck[0] = rnd.Next(1, 14);
        }
    }

    // 4:   הפעולה מקבלת ערימת כלפים וקלפ ומוסיפה את הקלף בתחתית הערימה
    public static void InsertToBottom(int[] deck, int card)
    {
        //deck[deck.Length - 1] = card;

        //for (int i = 0; i < deck.Length - 1; i++)
        //{
        //    deck[i] = deck[i + 1];
        //}

        //deck[deck.Length - 1] = card;

        for (int i = 0; i < deck.Length; i++)
        {
            if (deck[i] == 0)
            {
                deck[i] = card;
                break;
            }
        }
    }

    // 5:   הפעולה מקבלת ערימת קלפים ומוציאה את הקלף מראש הערימה
    public static int GetFromTop(int[] deck)
    {
        int card = deck[0];

        for (int i = 1; i < deck.Length; i++)
        {
            deck[i - 1] = deck[i];

            if (deck[i] == 0)
                break;
        }

        deck[deck.Length - 1] = 0;

        return card;
    }

    // 6:   'הפלעולה מקבלת ערימת קלפים ומחזירה 'אמת' אם ערימה ריקה, אחרת 'שקר
    public static bool IsEmpty(int[] deck)
    {
        int count = 0;

        for (int i = 0; i < deck.Length; i++)
            if (deck[i] == 0)
                count++;

        if (count == deck.Length)
            return true;

        return false;
    }
}

class Program
{
    static void MoveAllCards(int[] cards)
    {
        for (int i = 1; i < cards.Length; i++)
            cards[i - 1] = cards[i];

        cards[cards.Length - 1] = 0;
    }

    static void Main()
    {
        int n = 15;
        //int m = 10;
        int[] p1 = new int[n];
        int[] p2 = new int[n];
        int card1, card2;
        int count = 0;
        int sessionGames = 1;

        // א.
        Heap.ResetDeckCards(p1);
        Heap.ResetDeckCards(p2);
        
        // הגרלת חפיסת קלפים
        Heap.GiveDeck(p1, n);
        Console.WriteLine(" for player 1");

        Heap.GiveDeck(p2, n);
        Console.WriteLine(" for player 2");

        while (!Heap.IsEmpty(p1) && !Heap.IsEmpty(p2))
        {
            card1 = Heap.GetFromTop(p1);
            card2 = Heap.GetFromTop(p2);

            if (card1 > card2)
            {
                Heap.InsertToBottom(p1, card1);
                //if (p1[p1.Length - 1] != 0)
                //    MoveAllCards(p1);
                Heap.InsertToBottom(p1, card2);
            }
            else
            {
                if (card1 < card2)
                {
                    Heap.InsertToBottom(p2, card2);
                    //if (p2[p2.Length - 1] != 0)
                    //    MoveAllCards(p2);
                    Heap.InsertToBottom(p2, card1);
                }
                else
                {
                    Heap.InsertToBottom(p1, p1[0]);
                    Heap.InsertToBottom(p2, p2[0]);
                }
            }
            card1 = 0;
            card2 = 0;
            
            if (count++ == 1000)
            {
                Console.WriteLine("---------------------------------------------");
                Heap.GiveDeck(p1, n);
                Console.WriteLine(" for player 1");

                Heap.GiveDeck(p2, n);
                Console.WriteLine(" for player 2");

                count = 0;
                sessionGames++;
            }
        }
        Console.WriteLine("\n=================== END THE GAME ===================\n");
        if (Heap.IsEmpty(p1))
            Console.WriteLine("The player 1 Lost the game");

        if (Heap.IsEmpty(p2))
            Console.WriteLine("The player 2 lost the game");

        Console.WriteLine("Session of games would be {0}", sessionGames);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p93tar04

using System;

class StudyingCourses
{
    public static string[] ListOfCourses()
    {
        string[] nameOfCourse = new string[11];

        nameOfCourse[0] = "Painting";
        nameOfCourse[1] = "Biology";
        nameOfCourse[2] = "Geography";
        nameOfCourse[3] = "Chemistry";
        nameOfCourse[4] = "Physics";
        nameOfCourse[5] = "Math";
        nameOfCourse[6] = "Computers";
        nameOfCourse[7] = "Literature";
        nameOfCourse[8] = "Musics";
        nameOfCourse[9] = "Sports";
        nameOfCourse[10] = "English";

        return nameOfCourse;
    }

}

using System;

class ClassTimeTable
{
    /* הפעולה מאתחלת את מערך מערכת השעות במחרוזות ריקות */
    public static void ResetStudySubject(string[,] timeTable)
    {
        for (int i = 1; i < timeTable.GetLength(0); i++)
        {
            for (int j = 0; j < timeTable.GetLength(1); j++)
            {
                timeTable[i, j] = "";
            }
        }
    }

    /* טענת כניסה: הפעולה מקבלת מערכת שעות, יום, שעה ומקצוע ומעדכנת את המקום המתאים במערכת שעות */
    public static void InsertSubject(string[,] timeTable, int day, int hour, string subject)
    {
        timeTable[hour - 1, day - 1] = subject;
    }

    /* טענת כניסה: הפעולה מקבלת מערכת שעות */
    /* טענת יציאה: הפעולה מחזירה את הקצוע הנלמד באותו יום ובאותה שעה */
    public static string GiveSubject(string[,] timeTable, int day, int hour)
    {
        string[,] table = new string[3, 6];
        string strTemp;
        int row, col;

        row = timeTable.GetLength(0);
        col = timeTable.GetLength(1);

        strTemp = timeTable[hour - 1, day - 1];

        return strTemp;
    }

    /* טענת כניסה: הפעולה מקבלת מערכת שעות ומדפיסה את המערכת בצורת טבלה */
    public static void PrintTimeTable(string[,] timeTable)
    {
        int row, col;

        row = timeTable.GetLength(0);
        col = timeTable.GetLength(1);

        for (int i = 0; i < timeTable.GetLength(0); i++)
        {
            for (int j = 0; j < timeTable.GetLength(1); j++)
            {
                Console.Write("{0,12}", timeTable[i, j]);
            }
            Console.WriteLine();
        }
    }

    /* טענת כניסה: הפעולה מקבלת מערכת שעות ומדפיסה את כל החלונות המופיעים בה. */
    /* .לכל חלון יודפס היום והשעה */
    /* חלון הוא שיעור בתוך יום הלימודים בו לא לומדים, לפניו ואחריו מתקיימים שיעורים */
    public static void PrintTimeTableWindow(string[,] timeTable)
    {
        for (int i = 1; i < timeTable.GetLength(0) - 2; i++)
        {
            for (int j = 0; j < timeTable.GetLength(1); j++)
            {
                if (timeTable[i - 1, j] == "" & timeTable[i + 1, j] == "")
                {
                    Console.WriteLine("{0,4}", timeTable[i, j]);
                }
            }
        }
    }

}



class Program
{
    // ClassTimeTable
    // 1 - void ResetStudySubject ( timeTable )
    // 2 - void InsertSubject ( timeTable, day, hour, subject)
    // 3 - string GiveSubject ( timeTable, day, hour )
    // 4 - void PrintTimeTable ( timeTable )
    // 5 - void PrintTimeTableWindow ( timeTable )
    static void Main()
    {
        string[,] myTable = new string[7, 6];
        string[] str = StudyingCourses.ListOfCourses();
        Random rnd = new Random();
        int num;

        int col, row;
        row = myTable.GetLength(0);
        col = myTable.GetLength(1);
        // 2.
        Console.WriteLine("2. ----------------------------------------------------------------------------------");
        for (int hour = 1; hour <= row; hour++)
        {
            for (int day = 1; day <= col; day++)
            {
                num = rnd.Next(11);
                ClassTimeTable.InsertSubject(myTable, day, hour, str[num]);
            }
        }
        ClassTimeTable.PrintTimeTable(myTable);

        // 3.
        Console.WriteLine("3. ----------------------------------------------------------------------------------");
        string subject;
        int d = 1;
        int h = 6;
        Console.Write("Enter a day: ");
        d = int.Parse(Console.ReadLine());

        Console.Write("Enter an hour: ");
        h = int.Parse(Console.ReadLine());

        subject = ClassTimeTable.GiveSubject(myTable, d, h);
        Console.WriteLine("myTable[{0},{1}] = {2}", h, d, subject);

        // 4.
        Console.WriteLine("4. ----------------------------------------------------------------------------------");
        ClassTimeTable.PrintTimeTable(myTable);

        // 5.
        Console.WriteLine("5. ----------------------------------------------------------------------------------");
        ClassTimeTable.PrintTimeTableWindow(myTable);
        
        Console.ReadKey();
    }
}

*******************************************************************************************************
// Project1

using System;

class Program
{
    //Implement function check (text) which checks whether brackets within text are
    //correctly nested. You need to consider brackets of three kinds: (), [], {}.


    //Examples:

    //check("a(b)") -> true
    //check("[{}]") -> true
    //check("[(]") -> false
    //check("}{") -> false
    //check("z([{}-()]{a})") -> true
    //check("") -> true

    static bool Check(string text)
    {
        int c1 = 0, c2 = 0, c3 = 0;
        for (int i = 0; i < text.Length; i++)
        {
            switch (text[i].ToString())
            {
                case "(": c1++; break;
                case ")": c1--; if (c1 < 0) return false; break;
                case "[": c2++; break;
                case "]": c2--; if (c2 < 0) return false; break;
                case "{": c3++; break;
                case "}": c3--; if (c3 < 0) return false; break;
            }
        }

        return (c1 == 0 && c2 == 0 && c3 == 0) ?
            true :
            false ;

        if (c1 == 0 && c2 == 0 && c3 == 0)
            return true;
        else
            return false;
    }

    static void Main()
    {
        string text;
        text = Console.ReadLine();

        Console.WriteLine(Check(text));

        Console.ReadKey();
    }
        
}
/*
switch (text[i].ToString())
{
    case "(": c1++; break;
    case ")": c1--; if (c1 < 0) return false; break;
    case "[": c2++; break;
    case "]": c2--; if (c2 < 0) return false; break;
    case "{": c3++; break;
    case "}": c3--; if (c3 < 0) return false; break;
}
*/
// int location1=text.IndexOf(“[");
//int location2=text.IndexOf(“(");
//int location2=text.IndexOf(“{");
// p1 = “[“, p2 = “]”, p3 = “(“, p4 = “)”, p5 = “{“, p6 = “}”;

// while(
//}

*******************************************************************************************************
// p97ex01

p108ex04

using System;

class Program
{
    static void Main()
    {
        int n;
        string kind, line;

        Console.WriteLine("Enter number of animals:");
        n = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter animals kinds:");
        kind = Console.ReadLine();

        line = kind;

        for (int i = 1; i < n; i++)
        {
            kind = Console.ReadLine();
            line = line + " * " + kind;
        }

        Console.WriteLine(line);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p99ex02

using System;

class Ch5Solve2LuckyNumber
{
    /* v ומערך שלמים n טענת כניסה: הפעולה מקבלת מערך מחרוזות */
    /* v ואת מספר המזל שלו למערך n טענת יציאה: הפעולה קולטת לכל משתתף את שמו למערך */
    public static void ReadDetails(string[] n, int[] v)
    {
        Console.WriteLine("Enter name and lucky number for each participant");
        for (int i = 0; i < n.Length; i++)
        {
            n[i] = Console.ReadLine();
            v[i] = int.Parse(Console.ReadLine());
        }
    }

    /* ובו מספרי מזל v טענת כניסה: הפעולה מקבלת מערך שלמים */
    /* טענת יציאה: הפעולה מחזירה את מספר המזל השכיח */
    public static int Frequent(int[] v)
    {
        int count;
        int frequentValue = 0;
        int maxFrequency = 0;

        for (int i = 0; i < v.Length; i++)
        {
            count = 1;
            for (int j = i + 1; j < v.Length; j++)
            {
                if (v[i] == v[j])
                {
                    count++;
                }
                if (count > maxFrequency)
                {
                    frequentValue = v[i];
                    maxFrequency = count;
                }
            }
        }

        return frequentValue;
    }

    /* num והערך של מספר מזל ,v מערך מספרי מזל ,n טענת הכניסה: הפעולה מקבלת מערך שמות */
    /* num טענת יציאה: הפעולה מדפיסה את שמות משתתפים להם יש את מספר המזל */
    public static void PrintNames(string[] n, int[] v, int num)
    {
        Console.WriteLine("The most frequent chosen number is: " + num);
        Console.WriteLine("The names of participants that choose it are:");
        for (int i = 0; i < n.Length; i++)
        {
            if (v[i] == num)
                Console.WriteLine(n[i]);
        }
    }


    /* הפעולה הראשית קולטת את השמות ואת מספרי המזל של משתתפי החוג */
    /* ומדפיסה את שלמות המשתתפים שבחרו במספר המזל השכיח */
    static void Main()
    {
        int n;
        string[] names;
        int[] luckNumbers;
        int f;

        Console.WriteLine("Enter number of participants in class:");
        n = int.Parse(Console.ReadLine());

        names = new string[n];
        luckNumbers = new int[n];

        ReadDetails(names, luckNumbers);

        f = Frequent(luckNumbers);

        PrintNames(names, luckNumbers, f);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p104ex03

using System;

class ChSolve3Palindrome
{
    public static bool Palindrome(string st)
    {
        int n = st.Length / 2;

        for (int i = 0; i < n; i++)
            if (st[i] != st[st.Length - 1 - i])
                return false;

        return true;
    }


    static void Main()
    {
        string str = Console.ReadLine();

        while (str != "")
        {
            Console.WriteLine(str + " is palindrome? - " + Palindrome(str));
            str = Console.ReadLine();
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p105tar01

using System;

class Program
{
    static void Main()
    {
        string st = "ab1cd2";
        int n;
        char ch1 = 'a', ch2 = 'f';
        int solve;

        solve = ch1 - ch2;
        n = "a".CompareTo("d");

        n = st.Length;

        string s1 = "abhfakl";
        string s2 = "abcaz";
        n = s1.CompareTo(s2);

        st = "a1s2d3f4g";
        s1 = st[0] + st[st.Length - 1].ToString();

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p105tar02

using System;

class Program
{
    static void PrintEvenLength(string[] str)
    {
        for (int i = 0; i < str.Length; i++)
            if (str[i].Length % 2 == 0)
                Console.WriteLine("The string is: " + str[i] + " and length = " + str[i].Length);
    }

    static void GetStrings()
    {
        string[] st = new string[40];

        Console.WriteLine("Enter 40 strings");
        for (int i = 0; i < 40; i++)
            st[i] = Console.ReadLine();

        PrintEvenLength(st);
    }

    static void Main()
    {

        GetStrings();

        Console.ReadKey();
    }
}




*******************************************************************************************************
// p105tar03

using System;

class Program
{
    static void PrintData(string[] listNames)
    {
        Console.WriteLine("Printing all names:");
        for (int i = 0; i < listNames.Length; i++)
            Console.WriteLine(listNames[i]);

        Console.WriteLine("------------------------------------");
    }

    static string[] GetNames(string[] listNames)
    {
        Console.WriteLine("Enter some names:");
        for (int i = 0; i < listNames.Length; i++)
            listNames[i] = Console.ReadLine();

        return listNames;
    }

    static void FindEmptyString(string[] listNames)
    {
        for (int i = 0; i < listNames.Length; i++)
            if (listNames[i] == "")
                listNames[i] = null;
    }

    static void AdditionalName(string[] listNames, string str)
    {
        for (int i = 0; i < listNames.Length; i++)
        {
            if (str.Equals(listNames[i]))
                Console.WriteLine("The name: " + str + " it finded");
            else
                if (listNames[i] == null || listNames[i] == "")
                    listNames[i] = str;
        }
    }

    static void Main()
    {
        string[] listNames = new string[5];
        string name;

        listNames = GetNames(listNames);

        FindEmptyString(listNames);

        Console.WriteLine("\nPrinting the names before adding");
        PrintData(listNames);

        Console.WriteLine("\nEnter another name: ");
        name = Console.ReadLine();

        AdditionalName(listNames, name);

        Console.WriteLine("Printing the names after adding");
        PrintData(listNames);
        
        Console.ReadKey();
    }
}

*******************************************************************************************************
// p105tar04

using System;

class Program
{
    static void PrintData(string[] listOfNames)
    {
        Console.WriteLine("Printing all names:");
        for (int i = 0; i < listOfNames.Length; i++)
            Console.WriteLine(listOfNames[i]);

        Console.WriteLine("------------------------------------");
    }

    static string[] GetNames(string[] listOfNames)
    {
        Console.WriteLine("Enter some names:");
        for (int i = 0; i < listOfNames.Length; i++)
            listOfNames[i] = Console.ReadLine();

        return listOfNames;
    }

    static void FindEmptyString(string[] listOfNames)
    {
        for (int i = 0; i < listOfNames.Length; i++)
            if (listOfNames[i] == "")
                listOfNames[i] = null;
    }

    static void AddingNames(string[] listOfNames, string str)
    {
        for (int i = 0; i < listOfNames.Length; i++)
        {
            if (str.Equals(listOfNames[i]))
                Console.WriteLine("The name: " + str + " it finded");
            else
                if (listOfNames[i] == null || listOfNames[i] == "")
                    listOfNames[i] = str;
        }
    }

    static void BubbleSort(string[] listOfNames)
    {
        string tempStr;
        int n;
        string st1, st2;
        
        for (int i = 0; i < listOfNames.Length - 1; i++)
        {
            for (int j = 0; j < listOfNames.Length - i - 1; j++)
            {
                st1 = listOfNames[j];
                st2 = listOfNames[j + 1];

                n = st1.CompareTo(st2);

                if (st1.CompareTo(st2) > 0)
                {
                    tempStr = listOfNames[j];
                    listOfNames[j] = listOfNames[j + 1];
                    listOfNames[j + 1] = tempStr;
                }
            }
        }
    }

    static void Main()
    {
        string[] listOfNames = new string[7];
        string name;

        listOfNames = GetNames(listOfNames);

        //FindEmptyString(listOfNames);

        //Console.WriteLine("\nPrinting the names before adding");
        //PrintData(listOfNames);

        //Console.WriteLine("\nEnter another name: ");
        //name = Console.ReadLine();

        //AddingNames(listOfNames, name);

        Console.WriteLine("Printing the names after adding");
        PrintData(listOfNames);

        // order all of the names - Bubble Sort
        BubbleSort(listOfNames);
        PrintData(listOfNames);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p105tar05

using System;

class Program
{
    static string ReverseString(string str)
    {
        string strReverse = "";
        
        for (int i = 0; i < str.Length; i++)
            strReverse = strReverse + str[str.Length-i-1];

        return strReverse;
    }

    static void Main()
    {
        string originalStr;
        string tempStr;

        Console.Write("Please enter a some string: ");
        originalStr = Console.ReadLine();
        tempStr = originalStr;

        Console.WriteLine("\nBefore reversing the string is: " + originalStr);
        originalStr = ReverseString(originalStr);

        Console.WriteLine("\nAfter reversing the string is: " + originalStr);

        Console.WriteLine("-----------------------------");

        if (originalStr == tempStr)
            Console.WriteLine("The string is a palindrome");
        else
            Console.WriteLine("The string isn't a palindrome");

        

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p106tar06

using System;

class Program
{
    static void OrderedPair(string str)
    {
        char ch1, ch2;
        for (int i = 0; i < str.Length - 1; i++)
        {
            ch1 = str[i];
            ch2 = str[i + 1];

            if (ch1 == --ch2)
                Console.WriteLine("({0}, {1})", str[i], str[i + 1]);
        }
    }

    static void Main()
    {
        string str;

        str = "$5cd#nm$uvw";
        OrderedPair(str);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p106tar07

using System;

class Program
{
    static void Print(int[] n, string[] s)
    {
        for (int i = 0; i < s.Length; i++)
        {
            Console.WriteLine("{0} : {1} ", s[i], n[i]);
        }
    }
    static void LengthSequence(string str)
    {
        int[] arr;
        string[] strArr;
        int len = 0, ct = 0;

        for (int i = 1; i < str.Length - 1; i++)
        {
            ct = 0;
            while (str[i - 1] == str[i] && i < str.Length - 1)
            {
                ct++;
                i++;
            }
            if (ct != 0)
                len++;
        }

        ct = 0;
        arr = new int[len];
        strArr = new string[len];
        bool flag = true;

        for (int i = 0; i < str.Length - 1; i++)
        {
            for (int j = 1; j < str.Length - 1; j++)
            {
                if (i + j < str.Length)
                {
                    if (str[i] == str[j + i])
                    {
                        arr[ct]++;
                        strArr[ct] = str[i].ToString();
                    }
                    else
                    {
                        i = j + i - 1;
                        break;
                    }
                }
                else
                {
                    flag = false;
                    break;
                }
            }

            if (arr[ct] != 0) ct++;

            if (!flag) break;
        }

        for (int i = 0; i < arr.Length; i++)
        {
            arr[i]++;
        }

        Print(arr, strArr);
    }

    static void Main()
    {
        string str = "aabccccaaacddd";

        //LengthSequence(str);

        LengthSequence("aabccccaaacdddf");   // not working

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p107AdditionalMethods

using System;

class Program
{
    static void Main()
    {
        /////////////////////////           IndexOf         /////////////////////////
        //------------------------------------------    int IndexOf(string str)
 
        string st = "abcdefg";
        int p1 = st.IndexOf("cd");
        int p2 = st.IndexOf("abc");
        int p3 = st.IndexOf("x");

        //------------------------------------------    int IndexOf(string str, int from)

        p1 = st.IndexOf("cd", 3);
        p2 = st.IndexOf("cd", 2);

        //------------------------------------------    int LastIndexOf(string str)
        
        st = "abcdeabfg";
        p1 = st.LastIndexOf("ab");
        p2 = st.LastIndexOf("abc");
        p3 = st.LastIndexOf("xy");

        //------------------------------------------    int LastIndexOf(string str, int from)

        p1 = st.LastIndexOf("ab", 6);
        p2 = st.LastIndexOf("ab", 4);


        /////////////////////////           Substring         /////////////////////////
        //------------------------------------------    string Substring(int begin)
        st = "abcdefg";
        string str1 = st.Substring(3);
        string str2 = st.Substring(6);

        //------------------------------------------    string Substring(int start, int count)

        str1 = st.Substring(2, 4);


        /////////////////////////           Replace         /////////////////////////
        //------------------------------------------    string Replace(char c1, char c2)
        string s1 = "abaabcas";
        string s2 = s1.Replace('a', '*');

        //------------------------------------------    string Replace(string c1, string c2)

        s1 = "abaabcas";
        s2 = s1.Replace("ab", "*");

        //------------------------------------------    string Insert(int start, string s)

        s1 = "abaabcas";
        s2 = s1.Insert(2, "***");

        //------------------------------------------    string Remove(int start, int cout)

        s1 = "abaabcas";
        s2 = s1.Remove(1, 4);

    }
}

*******************************************************************************************************
// p108ex04

using System;

class Program
{
    public static int CheckName(string[] c, string name)
    {
        string temp;
        name = " " + name + " ";
        for (int i = 0; i < c.Length; i++)
        {
            temp = " " + c[i] + " ";

            if (temp.IndexOf(name) == -1)
            {
                return i;
            }
        }

        return -1;
    }

    static void Main()
    {
        Console.WriteLine("Enter number of classes:");
        string[] namesArr = new string[int.Parse(Console.ReadLine())];
        int classNum;
        string stuName;
        for (int i = 0; i < namesArr.Length; i++)
        {
            Console.WriteLine("Insert names of students in class number " + (i + 1) + ":");
            namesArr[i] = Console.ReadLine();
        }

        Console.WriteLine("Insert new student name:");
        stuName = Console.ReadLine();
        classNum = CheckName(namesArr, stuName);

        if (classNum == -1)
        {
            Console.WriteLine("There is a student with name " + stuName + " in each class");
        }
        else
        {
            namesArr[classNum] = namesArr[classNum] + " " + stuName;
            Console.WriteLine("The student in class " + (classNum + 1) + " are: " + namesArr[classNum]);
        }

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p110tar08

using System;

class Program
{
    static void Main()
    {
        string s1, s2, b, st;
        int n;

        //// 1.
        //s1 = "lmnop";
        //s2 = s1.Remove(1, 3);

        //// 2.
        //s1 = "abcdefgh";
        //s2 = "xyxy";
        //b = s1.Insert(5, s2);

        //// 3.
        //s1 = "abxyz#xycgxy8*r";
        //s2 = "xy";
        //s1 = s1.Replace(s2, "$$");

        //// 4.
        //s1 = "abxyz#xycgxy8*r";
        //s2 = "xy";
        //n = s1.LastIndexOf(s2);

        //// 5.
        //s1 = "abxyz#xycgxy8*r";
        //s2 = "xy";
        //n = s1.IndexOf(s2, 4);

        // 6.
        st = "12a34b56c";
        s1 = st.Substring(3, 5);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p110tar09

using System;

class Program
{
    static int GetStrings(string[] str, string s)
    {
        int count = 0;

        for (int i = 0; i < str.Length; i++)
            if (str[i].IndexOf(s) >= 0)
                count++;

        return count;
    }

    static void Main()
    {
        string[] str = new string[5];
        string s = "ab";

        Console.WriteLine("Find how many strings include the: \"{0}\" string", s);

        for (int i = 0; i < str.Length; i++)
        {
            Console.Write("Enter some string text: ");
            str[i] = Console.ReadLine();
        }

        
        //GetStrings(str, s);
        Console.WriteLine("In the next putted strings finded {0} included strings", GetStrings(str, s));
        

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p110tar10

using System;

class Program
{
    // 1. IndexOf(string, int)
    static int FindWord(string sentence, string word)
    {
        int count = 0;

        for (int i = 0; i < sentence.Length; i++)
        {
            if (sentence.IndexOf(word, i) >= 0)
            {
                count++;
                i = sentence.IndexOf(word, i);
            }
        }

        return count;
    }

    // 2. IndexOf(string)
    static int FindWordOtherWay(string sentence, string word)
    {
        int lenWord = word.Length;
        int count = 0;
        string subSentence = sentence;

        int start = 0; // the start index from new cutted string

        for (int i = 0; i < sentence.Length; i++)
        {
            if (subSentence.IndexOf(word) >= 0)
            {
                count++;
                start = subSentence.IndexOf(word);

            }

            subSentence = "";
            for (int j = 1; j < sentence.Length - start; j++)
                subSentence = subSentence + sentence[start + j];

            sentence = subSentence;
        }

        return count;
    }

    static void Main()
    {
        string word = "you";
        string sentence = "Everyone knows that debugging is twice as hard as writing a program in the first place."+
            " So if you're as clever as you can be when you write it, how will you ever debug it?";

        //Console.WriteLine("The following sentence is: ");
        //Console.WriteLine(sentence);

        //Console.WriteLine("\nThe word is: ");
        //Console.WriteLine(word);

        //Console.WriteLine("------------------------------------------------------------");

        //Console.WriteLine("The word \"" + word + "\" finded in the sentence " + FindWord(sentence, word) + " times.");

        Console.WriteLine("------------------------Other way-------------------");
        Console.WriteLine("The following sentence is: ");
        Console.WriteLine(sentence);

        Console.WriteLine("\nThe word is: ");
        Console.WriteLine(word);

        Console.WriteLine("------------------------------------------------------------");

        Console.WriteLine("The word \"" + word + "\" finded in the sentence " + FindWordOtherWay(sentence, word) + " times.");

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p110tar11

using System;

class Program
{
    public static string CutTheWord(string sentence, string word)
    {
        int len = sentence.Length;

        sentence = sentence.Replace(word, null);

        len = sentence.Length;

        return sentence;
    }


    static void Main()
    {
        string word = "animals";
        string sentence = "People and animals see with their eyes. You have two eyes. Some animals have many eyes. " +
                        "Eyes can be little or big, and they can be many colors. What animals have these eyes? " +
                        "What color are your eyes? What do animals do with their eyes? They look for food. The duck " +
                        "looks for food in water. The gecko has big eyes. It can see well at night. It looks for insects " +
                        "to eat. Eyes help to protect animals from other animals. The crab has two " +
                        "eyes on top of its body. It can see big animals, and then it can run away.";

        Console.WriteLine("The text with \"" + word + "\" words it printed below: ");
        Console.WriteLine(sentence);

        sentence = CutTheWord(sentence, word);
        word = "see";
        sentence = CutTheWord(sentence, word);
        word = "eyes";
        sentence = CutTheWord(sentence, word);

        Console.WriteLine("\nThe text without \"" + word + "\" words it printed below: ");
        Console.WriteLine(sentence);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p110tar12

using System;

class Program
{
    public static string CutTheWord(string sentence, string word)
    {
        int len = sentence.Length;

        sentence = sentence.Replace(word, "---------");

        len = sentence.Length;

        return sentence;
    }


    static void Main()
    {
        string word = "animals";
        string sentence = "People and animals see with their eyes. You have two eyes. Some animals have many eyes. " +
                        "Eyes can be little or big, and they can be many colors. What animals have these eyes? " +
                        "What color are your eyes? What do animals do with their eyes? They look for food. The duck " +
                        "looks for food in water. The gecko has big eyes. It can see well at night. It looks for insects " +
                        "to eat. Eyes help to protect animals from other animals. The crab has two " +
                        "eyes on top of its body. It can see big animals, and then it can run away.";

        Console.WriteLine("The text with \"" + word + "\" the sentence it printed below:\n");
        Console.WriteLine(sentence);

        sentence = CutTheWord(sentence, word);

        Console.WriteLine("\n\n\nThe text without \"" + word + "\" the sentence it printed below:\n");
        Console.WriteLine(sentence);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p111tar13

using System;

class Program
{
    //public static string CutTheWord(string sentence, string word)
    //{
    //    int len = sentence.Length;

    //    sentence = sentence.Replace(word, "---------");

    //    len = sentence.Length;

    //    return sentence;
    //}

    static string What1(string st, int from, int to)
    {
        string st1, st2;

        st1 = st.Substring(0, from);

        st2 = st.Substring(to);

        string str = st.Substring(0, from) + st.Substring(to);

        return str;
    }

    static string What2(string st, int from, int to)
    {
        string st1 = st.Substring(from, to);

        st1 = st.Replace(st1, "--");

        string str = st.Replace(st.Substring(from, to), "");

        return str;

    }

    static string What3(string st, string sub, int place)
    {
        string strTest = st.Substring(place);

        string str = st.Substring(0, place) + sub + st.Substring(place);

        return str;
    }

    static void Main()
    {
        int from = 5, to = 10, place = 4;

        string st = "People and animals see with their eyes";

        string sub = "COMPUTER";

        //int len1St, len2Sub;

        //len1St = st.Length;
        //len2Sub = sub.Length;

        string str;

        Console.WriteLine("The original \"st\" sentence it printed below:");
        Console.WriteLine(st);

        Console.WriteLine("\nThe original \"sub\" sentence it printed below:");
        Console.WriteLine(sub);


        Console.WriteLine("\n------------------------------------------------------------------------------\n");
 
        str = What1(st, from, to);

        Console.WriteLine(str);

        str = "";

        str = What2(st, from, to);
        Console.WriteLine("\n" + str);


        str = "";

        str = What3(st, sub, 4);
        Console.WriteLine("\n" + str);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p111tar14

using System;

class Program
{
    static string ABC(string abc)
    {
        for (int i = 0; i < 26; i++)
            abc = abc + (char)(97 + i);

        return abc;
    }

    static void Main()
    {
        string str = "";

        Console.WriteLine("Before running \"ABC(string)\" : str = {0}", str);
        str = ABC(str);
        Console.WriteLine("After running \"ABC(string)\" : str = {0}", str);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p111tar15

using System;

class Program
{
    static string AlefBet()
    {
        int c1 = 0;
        string alefbet = "";

        for (int i = 0; i < 27; i++)
            alefbet = alefbet + (char)(1488 + i);

        for (int i = 10; i < alefbet.Length; i++)
        {
            switch (i)
            {
                case 10: alefbet = alefbet.Remove(10 - c1++, 1); break;
                case 13: alefbet = alefbet.Remove(13 - c1++, 1); break;
                case 15: alefbet = alefbet.Remove(15 - c1++, 1); break;
                case 19: alefbet = alefbet.Remove(19 - c1++, 1); break;
                case 21: alefbet = alefbet.Remove(21 - c1, 1); break;
            }
        }

        return alefbet;
    }

    //static string AlefBet(string alefbet)
    //{
    //    int c1 = 0;

    //    for (int i = 0; i < 27; i++)
    //        alefbet = alefbet + (char)(1488 + i);

    //    for (int i = 10; i < alefbet.Length; i++)
    //    {
    //        switch (i)
    //        {
    //            case 10: alefbet = alefbet.Remove(10 - c1++, 1); break;
    //            case 13: alefbet = alefbet.Remove(13 - c1++, 1); break;
    //            case 15: alefbet = alefbet.Remove(15 - c1++, 1); break;
    //            case 19: alefbet = alefbet.Remove(19 - c1++, 1); break;
    //            case 21: alefbet = alefbet.Remove(21 - c1, 1); break;
    //        }
    //    }

    //    return alefbet;
    //}

    static int[] GimatryNumber(string alefbet)
    {
        int[] gimatry = new int[alefbet.Length];
        int d = 1, count = 1;

        gimatry[0] = 1;
        for (int i = 1; i < alefbet.Length; i++)
        {
            gimatry[i] = gimatry[i - 1] + d;
            
            if ((i + count)/10 == count)
            {
                count++;
                d = d * 10;
            }
        }

        return gimatry;
    }

    static int SumString(string str)
    {
        string alefbet = AlefBet();
        int gimatrySum = 0, d = 1, count = 1;
        int temp = 0;

        int num;
        for (int i = 0; i < str.Length; i++)
        {
            num = 1;
            char s1 = str[i];
            char s2 = alefbet[num - 1];
            bool flag = true;
            while (flag)        // s1 != s2
            {
                temp = temp + d;
                if ((num + count - 1) / 10 == count)
                {
                    count++;
                    d = d * 10;
                }

                s2 = alefbet[num - 1];
                num++;

                if (s1 == s2) flag = false;
            }

            gimatrySum = gimatrySum + temp;

            d = 1;
            count = 1;
            temp = 0;
        }

        return gimatrySum;
    }

    static void PrintGimatryNumbers(string alefbet, int[] arr)
    {
        string[] letter = new string[alefbet.Length];
        for (int i = 0; i < alefbet.Length; i++)
        {
            letter[i] = alefbet[i].ToString();

            Console.WriteLine("{0} | {1}", letter[i], arr[i]);
        }
    }

    static void Main()
    {
        string str = "מוריס";

        SumString(str);

        int gimatryNumber = SumString(str);

        Console.WriteLine("The string is: {0}: gimatry number is: {1}", str, gimatryNumber);

        //string alefbet = "";

        //alefbet = AlefBet(alefbet);

        //int[] arr;

        //arr = GimatryNumber(alefbet);

        //PrintGimatryNumbers(alefbet, arr);

        //char ch;
        //ch = (char)1489;
        //Console.WriteLine(ch);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p111tar16

using System;

class Program
{
    public static string ReoderString(string str)
    {
        string temp1 = "", temp2 = "";

        for (int i = 1; i <= str.Length; i+=2)
        {
            temp1 = str.Substring(i - 1, 1) + str.Substring(i, 1);
            temp2 = str.Substring(i, 1) + str.Substring(i - 1, 1);

            str = str.Replace(temp1, temp2);
        }

        return str;
    }

    static void Main()
    {
        string str = "ABCDEFGHIJ";

        Console.WriteLine("The original string is: {0}", str);

        str = ReoderString(str);

        Console.WriteLine("The string after reorder is: {0}", str);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p111tar17

using System;

class Program
{
    static int Guess(string st)
    {
        int init = 0;
        int count = 0;

        for (char i = 'a'; i <= 'z'; i++)
        {
            init = st.IndexOf(i);
            if (init != -1)
                count++;
        }

        return count;
    }

    static void Main()
    {
        // א
        int num;
        string str;

        Console.WriteLine("Enter a some string:");
        str = Console.ReadLine();

        num = Guess(str);
        Console.WriteLine("The number is {0}", num);

        // ב
        Console.WriteLine("\nEnter a some string:");
        str = Console.ReadLine();

        num = Guess(str);
        Console.WriteLine("The number is {0}", num);

        // ג
        // abc-מטרת הפעולה, היא למצוא מהו מספר האותיות השונות של המחרוזת המופיעות מה

        // ד
        // abc-טווח הערכים הוא בין 0 ל-26, כלומר מספר האותיות מה



        Console.ReadKey();
    }
}

*******************************************************************************************************
// p112tar18

using System;

class Program
{
    static string Update(string st, int n)
    {
        int len;

        for (int i = 0; i < n; i++)
        {
            len = st.Length;

            if (n > 1 && n < len)
                st = st.Remove(n, 2);
            else
                st = st.Insert(1, st);
            
        }

        return st;
    }

    static void Main()
    {
        string st = "";

        st = "good bye";

        st = Update(st, 8);

        st = "abcaxxyzxyzxysz";
        
        // if-אין מחרוזת שהאורך שלה תהיה קטנה מערך הנתון ויחד עם זאת יתבצעו אך ורק פעולות של התנאי ה
        // ואז תוכפל האות הראשונה לפחות פעם אחת Insert אז תופעל פונקציה ,else-אם לפחות פעם אחת תתבצעה פעולת ה
        // וזה יסתור את הדרישה, לכן לא ניתן למצוא ערך מספרי כזה שהוא לא שיהיה שווה לאוך המחרוזת ויבצע את הדרוש
        st = Update(st, 5);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p112tar19

using System;

class Program
{
    static void AddStar(string st)
    {
        for (int i = 3; i < st.Length; i += 4)
        {
            st = st.Insert(i, "*");
        }
    }

    static void Main()
    {
        string name = "adigetcat";

        AddStar(name);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p112tar20

using System;

class StringOp
{
    // 1 - Finding if character in the string
    public static bool IsCharFinded(string str, char ch)
    {
        for (int i = 0; i < str.Length; i++)
            if (ch == str[i])
                return true;

        return false;
    }

    // 2 - Return number characters in the string
    public static int CharAmountInString(string str, char ch)
    {
        int count = 0;

        for (int i = 0; i < str.Length; i++)
            if (ch == str[i])
                count++;

        return count;
    }

    // 3 - Remove all characters that include in a string
    public static string RemoveCharacter(string str, char ch)
    {
        string temp = str;

        for (int i = 0; i < temp.Length; i++)
        {
            if (ch == temp[i])
            {
                temp = temp.Remove(i, 1);
                i--;
            }
        }

        return temp;
    }

    // 4 - 
    public static bool FindSubString(string sentence, string word)
    {
        string st = string.Empty;
        int location = sentence.IndexOf(word);

        if (sentence.Length - location == word.Length)
            st = sentence.Substring(location, word.Length);

        if (st.Equals(word)) return true;

        #region ManulSearching
        //int count = 0;
        //    // Manual search...
        //    for (int i = 0; i < sentence.Length; i++)
        //    {
        //        count = 0;
        //        while (word[count] == sentence[i + count])
        //        {
        //            count++;

        //            if (count == word.Length)
        //                return true;
        //        }
        //    }
        #endregion

        return false;
    }

    public static string RemoveDuplicateContinuousCharacter(string sentence)
    {
        for (int i = 0; i < sentence.Length - 1; i++)
            if (sentence[i] == sentence[i + 1])
                sentence = sentence.Remove(i--, 1);

        return sentence;
    }
}

class Program
{
    static void Main()
    {
        string word = "bug it?";
        string sentence = "Everyone knows that debugging is twice as hard as writing a program in the first place." +
            " So if you're as clever as you can be when you write it, how will you ever debug it?";

        string str = "Hello World!";
        char ch = 'l';
        bool flag;
        int cn = 0;
        string st1 = "";

        flag = StringOp.IsCharFinded(str, ch);
        cn = StringOp.CharAmountInString(str, ch);
        st1 = StringOp.RemoveCharacter(str, ch);

        StringOp.FindSubString(sentence, word);

        sentence = "Hello world           ssddds s s";
        sentence = StringOp.RemoveDuplicateContinuousCharacter(sentence);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p113tar21

using System;

class StringOperation
{
    // 1 - פעולה המקבלת מחרוזת ותו ובודקת האם התו נמצא במחרוזת
    public static bool IsCharFinded(string str, char ch)
    {
        for (int i = 0; i < str.Length; i++)
            if (ch == str[i])
                return true;

        return false;
    }


    // 2 - פעולה המקבלת מחרוזת ותו ובודקת כמה פעמים התו מופיע במחרוזת
    public static int CharAmountInString(string str, char ch)
    {
        int count = 0;

        for (int i = 0; i < str.Length; i++)
            if (ch == str[i])
                count++;

        return count;
    }


    // 3 - פעולה המקבלת מחרוזת ותו ומוחקת את כל המופעים שלו מן המחרוזת
    public static string RemoveCharacter(string str, char ch)
    {
        string temp = str;

        for (int i = 0; i < temp.Length; i++)
        {
            if (ch == temp[i])
            {
                temp = temp.Remove(i, 1);
                i--;
            }
        }

        return temp;
    }


    // 4 - פעולה המקבלת מחרוזת ומחרוזת נוספת, ובודקת האם המחרוזת השנייה נמצאת
    //     ברצף כתת-מחרוזת במחרוזת הראשונה
    public static bool FindSubString(string sentence, string word)
    {
        string st = string.Empty;
        int location = sentence.IndexOf(word);

        if (sentence.Length - location == word.Length)
            st = sentence.Substring(location, word.Length);

        if (st.Equals(word)) return true;

        return false;
    }


    // 5 - פעולה המקבלת מחרוזת ומחזירה מחרוזת מצומצמת שלה, כך שמכל
    //     רצף של תווים זהים באורך כלשהו יישאר רק תו אחד
    public static string RemoveDuplicateContinuousCharacter(string sentence)
    {
        for (int i = 0; i < sentence.Length - 1; i++)
            if (sentence[i] == sentence[i + 1])
                sentence = sentence.Remove(i--, 1);

        return sentence;
    }
}

class Student
{
    // simulator for creates first name and last name
    public static string CreateAutomaticNames()
    {
        Random rnd = new Random();
        Random rndChar = new Random();

        string firstName = "", lastName = "";
        int lenStrName;

        lenStrName = rnd.Next(2, 8);
        for (int j = 0; j < lenStrName; j++)    // First name creator
            firstName = firstName + (char)rndChar.Next('a', 'z');

        lenStrName = rnd.Next(2, 8);
        for (int j = 0; j < lenStrName; j++)    // Last name creator
            lastName = lastName + (char)rndChar.Next('a', 'z');

        Console.WriteLine("First name is created: " + firstName);
        Console.WriteLine("Last name is created: " + lastName);

        return firstName + " " + lastName;
    }

    public static string CreateNames()
    {
        string firstName, lastName;

        Console.Write("Enter first name: ");
        firstName = Console.ReadLine();

        Console.Write("Enter last name: ");
        lastName = Console.ReadLine();

        return firstName + " " + lastName;
    }

    // הפעולה מחפשת אחת האותיות שלא תרינות עבור שם נתון
    // 'e', 'i', 'o', 'a', 'u'
    public static bool IsLetterForWrongName(string name)
    {
        int count = 0;

        for (int i = 0; i < name.Length - 1; i++)
        {
            switch (name[i])
            {
                case 'e': count++; break;
                case 'i': count++; break;
                case 'o': count++; break;
                case 'a': count++; break;
                case 'u': count++; break;
                default: count = 0; break;
            }

            if (count > 2) return true;
        }

        return false;
    }

    public static string[,] FindContinuousSpesialLetter(string[,] table)
    {
        bool f1, f2;
        string[,] tempTable = new string[table.GetLength(0), table.GetLength(1)];
        string firstName = "", lastName = "";
        int location = 0;

        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                location = table[i, j].IndexOf(' ');

                // find for first name
                firstName = table[i, j].Substring(0, location);
                f1 = IsLetterForWrongName(firstName);
                
                // find for last name 
                lastName = table[i, j].Substring(location + 1, table[i, j].Length - location - 1);
                f2 = IsLetterForWrongName(lastName);

                if (f1 || f2)
                    tempTable[i, j] = table[i, j];
            }
        }

        return tempTable;
    }
}


class Program
{
    static void PrintAllStudents(string[,] table)
    {
        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                Console.Write("{0,16} ", table[i, j]);
            }
            Console.WriteLine();
        }
    }
    static void PrintWrongNames(string[,] table)
    {
        for (int i = 0; i < table.GetLength(0); i++)
            for (int j = 0; j < table.GetLength(1); j++)
                if (table[i, j] != null)
                    Console.WriteLine("the name of student with wrong name in row {0} and column {1}, is: {2}",
                        j, i, table[i, j]);
    }

    // the method automatic creates all class members: first names and last names
    // and putted them in table string
    static string[,] FillClassMembers(string[,] table)
    {

        for (int i = 0; i < table.GetLength(0); i++)
        {
            for (int j = 0; j < table.GetLength(1); j++)
            {
                table[i, j] = Student.CreateAutomaticNames();
                
                Console.WriteLine("---------------------------");
            }
        }


        return table;
    }

    static void Main()
    {
        //string[,] table = new string[10, 4];
        string[,] table = new string[10, 4];

        table = FillClassMembers(table);

        Console.WriteLine("============================= Class Members =============================");
        PrintAllStudents(table);

        Console.WriteLine("\n===================== Class Members with Wrong Names =====================");

        table = Student.FindContinuousSpesialLetter(table);

        Console.WriteLine();
        PrintWrongNames(table);


        Console.ReadKey();
    }
}

*******************************************************************************************************
// p113tar22

using System;

class Program
{
    // 
    static bool FindEqualsSymbols(string word, int start, int end)
    {
        int ca = 0, cb = 0;
        //string strTemp = "";

        word = word.Substring(start, end);

        for (int i = 0; i < word.Length; i++)
        {
            if (word[i] == 'a')
                ca++;

            if (word[i] == 'b')
                cb++;
        }

        return ca == cb && ca != 0 ? true : false;
    }

    static void AllSubStrings(string myStr)
    {
        string subStr = "";
        //bool flag;
        int num = 2;
        int count = 0;

        while (num <= 6)
        {
            for (int i = 0; i < myStr.Length && i < myStr.Length + 1 - num; i++)
            {
                subStr = myStr.Substring(i, num);

                if (FindEqualsSymbols(subStr, 0, num))
                {
                    Console.WriteLine("{0} right substring is: {1}", ++count, subStr);
                }
            }
            num++;
        }
    }

    static void Main() 
    {
        string word = "adsfbbsafawwbbbasdfasbbbbbavcazz";
        bool flag;

        // א
        //flag = FindEqualsSymbols(word, 3, 7);

        // ב
        string myStr = "abcbbaadaaabbb";
        AllSubStrings(myStr);
        Console.WriteLine();

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p113tar23

using System;

class Program
{
    static int FindBiggestPalindrome(string symbol, int start, int end)
    {
        int location = 0;
        int len = 0, maxLen = 0;
        char left, right;

        for (int i = 0; i < symbol.Length; i++)
        {
            len = 0;
            location = symbol.IndexOf('*');
            for (int j = 0; j < location; j++)
            {
                left = symbol[location - j - 1];
                right = symbol[location + j + 1];

                if (left == right) len++;
                else break;
            }

            if (len > maxLen)
                maxLen = len;

            symbol = symbol.Remove(0, location + 1);
        }

        return maxLen;
    }

	
    static void Main()
    {
        string palin1 = "asdfa*asdf8*";
        string palin2 = "cab*bacaa*aacab*fa";

        FindBiggestPalindrome(palin2, 0, palin2.Length);

        Console.WriteLine("The biggest palindrome of: {0} is: {1}", palin2, FindBiggestPalindrome(palin2, 0, palin2.Length));

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p113tar24

using System;

class Program
{
    static string ReadString()
    {
        string str = string.Empty;

        Console.Write("Enter some string: ");
        str = Console.ReadLine();

        return str;
    }

    static string ReverseString(string str)
    {
        string s1 = "", s2="", s3="";

        for (int i = 0; i < str.Length / 2; i++)
        {
            s1 = str.Substring(i, 1);
            s2 = str.Substring(str.Length - 1 - i, 1);

            str = str.Remove(i, 1);
            str = str.Insert(i, s2);

            str = str.Remove(str.Length - i - 1, 1);
            str = str.Insert(str.Length - i, s1);
        }

        return str;
    }

    static string SubStringsReverse(string str)
    {
        string subStr = "", tempStr = "";
        int location = 0;

        tempStr = str;
        str = "";

        if (tempStr.Length !=0)
        {
            for (int j = 0; j < tempStr.Length; j++)
            {
                if (tempStr.IndexOf('0') != -1)
                {
                    location = tempStr.IndexOf('0');

                    subStr = tempStr.Substring(0, location);

                    subStr = ReverseString(subStr);

                    tempStr = tempStr.Remove(0, location + 1);

                    str = str + subStr + "0";
                }
            }
        }


        if (tempStr.Length != 0)
            str = str + ReverseString(tempStr.Substring(0, tempStr.Length));

        return str;
    }

    //static string[] SubStringsReverse(string[] str)
    //{
    //    string subStr = "", tempStr = "";
    //    int location = 0;

    //    for (int i = 0; i < str.Length; i++)
    //    {
    //        tempStr = str[i];
    //        str[i] = "";
    //        //tempStr = "";
    //        if (tempStr != null && tempStr.IndexOf('0') != -1)
    //        {
    //            for (int j = 0; j < tempStr.Length; j++)
    //            {
    //                location = tempStr.IndexOf('0');

    //                subStr = tempStr.Substring(0, location);

    //                subStr = ReverseString(subStr);

    //                tempStr = tempStr.Remove(0, location + 1);

    //                str[i] = str[i] + subStr + "0";
    //                //tempStr = subStr;
    //                //str[i] = subStr;
    //            }
    //        }
    //        else
    //            continue;

    //        if (tempStr.Length != 0)
    //            str[i] = str[i] + tempStr;
    //    }

    //    return str;
    //}

    static void Main()
    {
        //string[] str=new string[5];
        string str1 = "";
        bool flag = true;

        Console.WriteLine("For quit from the program insert \"the end\"");

        while (flag == true)
        {
            str1 = ReadString();

            if (str1 == "the end")
            {
                flag = false;
                Console.WriteLine("You're quit from the program!");
            }
            else
            {
                Console.WriteLine("The string berfore reversing sub-stings is: {0}", str1);
                str1 = SubStringsReverse(str1);
                Console.WriteLine("The string after reversing sub-stings is: {0}", str1);
                Console.WriteLine("------------------------------------------------");
            }
        }
        
        //str[0] = "abcd0adsf0e";
        //str[1] = "b0y%S0ggg0";
        //str = SubStringsReverse(str);

        Console.ReadKey();
    }
}

*******************************************************************************************************
// p113tar25

using System;

class Program
{
    static string RemoveNextDuplicateWord(string sentence)
    {
        string w1 = "", w2 = "", tempSentence = "";
        int location;

        while (sentence.IndexOf(' ') != -1)
        {
            location = sentence.IndexOf(' ');   // location - w1
            w1 = sentence.Remove(location);
            sentence = sentence.Substring(location + 1, sentence.Length - location - 1);

            location = sentence.IndexOf(' ');  // location - w2

            if (sentence.IndexOf(' ') != -1)
                w2 = sentence.Substring(0, sentence.IndexOf(' '));

            if (w1 != w2)
                tempSentence = tempSentence + w1 + " ";
        }

        tempSentence = tempSentence + w1 + " " + sentence;

        return tempSentence;
    }

    static void Main()
    {
        string sentence = "Hello, I am go go to far far far a a a far way!";

        Console.WriteLine("the sentence before removing duplicates word is: ");
        Console.WriteLine(sentence);

        sentence = RemoveNextDuplicateWord(sentence);
        Console.WriteLine("\nthe sentence after removing duplicates word is: ");
        Console.WriteLine(sentence);

        Console.ReadKey();
    }
}

*******************************************************************************************************
///////////////////////////////////////////////// EOF /////////////////////////////////////////////////
*******************************************************************************************************


